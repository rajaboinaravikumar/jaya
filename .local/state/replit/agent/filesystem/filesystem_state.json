{"file_contents":{"client/src/components/Footer.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { Mail, Phone, MapPin, Facebook, Twitter, Linkedin, Youtube, Instagram } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\n\nexport function Footer() {\n  const [, setLocation] = useLocation();\n  \n  return (\n    <footer className=\"bg-card border-t\">\n      <div className=\"max-w-7xl mx-auto px-6 py-16\">\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-12 mb-12\">\n          <div>\n            <div className=\"flex items-center gap-3 mb-4\">\n              <div className=\"h-10 w-10 rounded-md bg-primary flex items-center justify-center\">\n                <span className=\"text-primary-foreground font-bold text-lg\">J</span>\n              </div>\n              <div>\n                <div className=\"font-heading font-bold text-lg leading-none\">JITS</div>\n                <div className=\"text-xs text-muted-foreground\">Excellence in Education</div>\n              </div>\n            </div>\n            <p className=\"text-sm text-muted-foreground mb-4\">\n              Jain Institute of Technology & Science - Shaping future leaders through quality education and innovation.\n            </p>\n            <div className=\"flex gap-2\">\n              <Button size=\"icon\" variant=\"ghost\" data-testid=\"button-social-facebook\">\n                <Facebook className=\"h-4 w-4\" />\n              </Button>\n              <Button size=\"icon\" variant=\"ghost\" data-testid=\"button-social-twitter\">\n                <Twitter className=\"h-4 w-4\" />\n              </Button>\n              <Button size=\"icon\" variant=\"ghost\" data-testid=\"button-social-linkedin\">\n                <Linkedin className=\"h-4 w-4\" />\n              </Button>\n              <Button size=\"icon\" variant=\"ghost\" data-testid=\"button-social-youtube\">\n                <Youtube className=\"h-4 w-4\" />\n              </Button>\n              <Button size=\"icon\" variant=\"ghost\" data-testid=\"button-social-instagram\">\n                <Instagram className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n\n          <div>\n            <h3 className=\"font-semibold text-lg mb-4\">Quick Links</h3>\n            <ul className=\"space-y-2 text-sm\">\n              {[\"About Us\", \"Admissions\", \"Academics\", \"Placements\", \"Alumni\", \"Contact\"].map((item) => (\n                <li key={item}>\n                  <button\n                    onClick={() => setLocation(`/${item.toLowerCase().replace(/\\s+/g, '-')}`)}\n                    className=\"text-muted-foreground hover:text-foreground transition-colors text-left\"\n                    data-testid={`link-footer-${item.toLowerCase().replace(/\\s+/g, '-')}`}\n                  >\n                    {item}\n                  </button>\n                </li>\n              ))}\n            </ul>\n          </div>\n\n          <div>\n            <h3 className=\"font-semibold text-lg mb-4\">Contact Info</h3>\n            <div className=\"space-y-3 text-sm text-muted-foreground\">\n              <div className=\"flex items-start gap-2\">\n                <MapPin className=\"h-4 w-4 mt-0.5 flex-shrink-0\" />\n                <span>123 College Road, Technology Park, Bangalore - 560001</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Phone className=\"h-4 w-4 flex-shrink-0\" />\n                <span>+91 80 1234 5678</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Mail className=\"h-4 w-4 flex-shrink-0\" />\n                <span>info@jits.edu.in</span>\n              </div>\n            </div>\n          </div>\n\n          <div>\n            <h3 className=\"font-semibold text-lg mb-4\">Newsletter</h3>\n            <p className=\"text-sm text-muted-foreground mb-4\">\n              Subscribe to receive updates about admissions, events, and news.\n            </p>\n            <div className=\"flex gap-2\">\n              <Input type=\"email\" placeholder=\"Your email\" data-testid=\"input-newsletter-email\" />\n              <Button data-testid=\"button-newsletter-subscribe\">Subscribe</Button>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"border-t pt-8 flex flex-col md:flex-row items-center justify-between gap-4 text-sm text-muted-foreground\">\n          <p>&copy; 2026 JITS - Jain Institute of Technology & Science. All rights reserved.</p>\n          <div className=\"flex gap-6\">\n            <button\n              onClick={() => setLocation(\"/privacy\")}\n              className=\"hover:text-foreground transition-colors\"\n              data-testid=\"link-privacy\"\n            >\n              Privacy Policy\n            </button>\n            <button\n              onClick={() => setLocation(\"/terms\")}\n              className=\"hover:text-foreground transition-colors\"\n              data-testid=\"link-terms\"\n            >\n              Terms of Service\n            </button>\n            <button\n              onClick={() => setLocation(\"/sitemap\")}\n              className=\"hover:text-foreground transition-colors\"\n              data-testid=\"link-sitemap\"\n            >\n              Sitemap\n            </button>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":5198},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"design_guidelines.md":{"content":"# JITS College Website - Design Guidelines\n\n## Design Approach\n\n**Selected Approach:** Hybrid - Design System Foundation with Marketing Enhancement\n\n**Justification:** Educational institutions require both credibility (utility-focused dashboards) and engagement (marketing pages). We'll use Material Design principles as our foundation for consistency across portals, enhanced with modern educational site aesthetics inspired by institutions like MIT OpenCourseWare and productive tools like Notion.\n\n**Core Principles:**\n- Institutional trust through clean, professional design\n- Information clarity for complex academic data\n- Welcoming accessibility for diverse user groups\n- Modern progressiveness reflecting \"2026 trends\"\n\n## Color Palette\n\n**Light Mode:**\n- Primary: 210 80% 45% (Professional blue - trust and academia)\n- Primary Hover: 210 80% 38%\n- Secondary: 210 20% 25% (Dark slate for text hierarchy)\n- Background: 0 0% 98% (Soft white)\n- Surface: 0 0% 100% (Pure white cards)\n- Border: 210 15% 88%\n- Accent: 165 65% 45% (Teal for CTAs and success states)\n- Warning: 35 90% 55% (Amber for notifications)\n- Error: 0 70% 50%\n\n**Dark Mode:**\n- Primary: 210 75% 55%\n- Primary Hover: 210 75% 62%\n- Secondary: 210 15% 75%\n- Background: 220 20% 10%\n- Surface: 220 18% 14%\n- Border: 210 15% 22%\n- Accent: 165 55% 50%\n\n## Typography\n\n**Font Stack:**\n- Headings: 'Plus Jakarta Sans' (Google Fonts) - Modern, geometric, professional\n- Body: 'Inter' (Google Fonts) - Highly legible for dense information\n- Monospace: 'JetBrains Mono' for code/IDs\n\n**Scale:**\n- Display (H1): text-5xl md:text-6xl font-bold tracking-tight\n- Heading (H2): text-3xl md:text-4xl font-bold\n- Subheading (H3): text-2xl md:text-3xl font-semibold\n- Body Large: text-lg font-normal\n- Body: text-base font-normal\n- Small: text-sm\n- Tiny: text-xs\n\n## Layout System\n\n**Spacing Primitives:** Use Tailwind units of 2, 4, 6, 8, 12, 16, 20, 24\n- Micro spacing: 2-4 (buttons, form elements)\n- Component spacing: 6-8 (between related elements)\n- Section spacing: 12-20 (between major sections)\n- Page margins: 16-24 (outer containers)\n\n**Container Strategy:**\n- Marketing pages: max-w-7xl for full sections, max-w-4xl for content\n- Dashboards: max-w-screen-2xl with sidebar layouts\n- Forms: max-w-2xl centered\n\n**Grid System:**\n- Homepage features: grid-cols-1 md:grid-cols-2 lg:grid-cols-3\n- Dashboard cards: grid-cols-1 lg:grid-cols-2 xl:grid-cols-3\n- Statistics: grid-cols-2 md:grid-cols-4\n\n## Component Library\n\n**Navigation:**\n- Sticky header with mega menu dropdowns\n- Mobile: slide-in drawer with accordion submenus\n- Search bar prominent in header with autocomplete dropdown\n- Breadcrumb navigation in dashboard sections\n\n**Buttons:**\n- Primary: Solid background with primary color\n- Secondary: Outline with border-2\n- Ghost: Hover background only\n- Sizes: sm (px-4 py-2), md (px-6 py-3), lg (px-8 py-4)\n- Image overlays: backdrop-blur-md bg-white/20 dark:bg-gray-900/40\n\n**Cards:**\n- Dashboard: bg-surface border rounded-xl p-6 shadow-sm\n- Feature cards: hover:shadow-lg transition with icon at top\n- Announcement: border-l-4 with color coding by type\n- Statistics: Large number display with label and trend indicator\n\n**Forms:**\n- Input fields: border rounded-lg px-4 py-3 with focus ring\n- Labels: text-sm font-medium mb-2\n- Validation: inline error messages with icon\n- File uploads: Drag-drop zone with preview\n- Captcha integration on all public forms\n\n**Data Display:**\n- Tables: Striped rows, sticky headers, sortable columns\n- Results viewer: Card-based with download actions\n- Attendance tracker: Calendar grid with color-coded status\n- Charts: Simple bar/line charts using minimal library\n\n**Overlays:**\n- Modals: max-w-2xl with backdrop blur\n- Notifications: Toast style, top-right, auto-dismiss\n- Tooltips: Small, contextual on hover\n\n## Homepage Specifications\n\n**Hero Section (90vh):**\n- Full-width image slider (3-4 campus images)\n- Overlaid content: Large headline + subtext + dual CTAs\n- Notification banner above (admission/exam dates)\n- Subtle parallax scroll effect\n\n**Quick Links Grid (4-column on desktop):**\n- Icon cards with hover lift effect\n- Student/Faculty/Alumni/Results portals\n- Icon from Heroicons, title, brief description\n\n**About JITS Section:**\n- 2-column: Left text (vision/mission), Right stats grid (4 key metrics)\n- Achievement badges with icons\n- Horizontal layout on mobile\n\n**Announcements Carousel:**\n- Auto-rotating cards (5-second interval)\n- Category tags with color coding\n- Date and \"Read more\" link\n\n**Events Preview (3-column cards):**\n- Upcoming event cards with date badge\n- Image thumbnail, title, location, RSVP button\n\n**Footer:**\n- 4-column: About, Quick Links, Contact, Newsletter\n- Social icons, sitemap, accreditation logos\n- Copyright and policy links\n\n## Dashboard Design Patterns\n\n**Student/Faculty/Alumni Dashboards:**\n- Left sidebar navigation (collapsible on mobile)\n- Top bar: Profile dropdown, notifications bell, search\n- Main content: Widget-based dashboard with draggable cards\n- Color-coded status indicators (attendance, fees, grades)\n- Quick action buttons always visible\n\n**Admin Dashboard:**\n- Data-dense tables with filters and bulk actions\n- Analytics charts in dashboard view\n- Role management with permission matrix\n- Activity log sidebar\n\n## Images\n\n**Required Images:**\n- **Hero Slider (3-4 images):** Wide campus shots showing buildings, students in activities, modern facilities. High-quality, bright, diverse student representation. Dimensions: 1920x1080 minimum\n- **About Section:** One impactful image showing campus life or iconic building. 800x600 minimum\n- **Event Cards:** Thumbnail images for each event preview (600x400)\n- **Department Pages:** Header images specific to each department (lab equipment, students, faculty)\n- **Placement Section:** Company logos and student testimonial photos\n- **Faculty Profiles:** Professional headshots\n\n**Placement:**\n- Hero: Full-width background with dark overlay (opacity-40)\n- Feature sections: Floating alongside text content\n- Event cards: Top of card with rounded corners\n- Testimonials: Circular cropped next to quote\n\n## Responsive Breakpoints\n\n- Mobile: < 768px (single column, hamburger menu)\n- Tablet: 768px - 1024px (2-column grids, visible sidebar)\n- Desktop: > 1024px (full layout, mega menu)\n\n**Mobile Enhancements:**\n- Bottom navigation for dashboards (5 key actions)\n- Swipe gestures for card navigation\n- Touch-optimized button sizes (min 44px)\n- PWA install prompt\n\n## Animations (Minimal)\n\n- Page transitions: Fade in (200ms)\n- Card hover: Slight lift (transform translateY(-2px))\n- Button press: Scale down (0.98)\n- Menu dropdown: Slide down with fade\n- NO scroll-triggered animations\n- NO complex hero animations\n\nThis design creates a trustworthy, modern educational platform balancing institutional credibility with contemporary web standards.","size_bytes":6871},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp, boolean, jsonb, decimal, index } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table - Required for Replit Auth\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// Users table - for Replit Auth\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  role: text(\"role\").default(\"student\"), // student, faculty, alumni, admin\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Students table\nexport const students = pgTable(\"students\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull().unique(),\n  rollNumber: text(\"roll_number\").notNull().unique(),\n  name: text(\"name\").notNull(),\n  course: text(\"course\").notNull(),\n  department: text(\"department\").notNull(),\n  semester: integer(\"semester\").notNull(),\n  cgpa: decimal(\"cgpa\", { precision: 3, scale: 2 }),\n  attendance: integer(\"attendance\").default(0),\n  feeStatus: text(\"fee_status\").default(\"pending\"), // paid, pending, overdue\n  phone: text(\"phone\"),\n  address: text(\"address\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Faculty table\nexport const faculty = pgTable(\"faculty\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull().unique(),\n  employeeId: text(\"employee_id\").notNull().unique(),\n  name: text(\"name\").notNull(),\n  department: text(\"department\").notNull(),\n  designation: text(\"designation\").notNull(),\n  specialization: text(\"specialization\"),\n  phone: text(\"phone\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Alumni table\nexport const alumni = pgTable(\"alumni\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull().unique(),\n  name: text(\"name\").notNull(),\n  graduationYear: integer(\"graduation_year\").notNull(),\n  course: text(\"course\").notNull(),\n  department: text(\"department\").notNull(),\n  currentCompany: text(\"current_company\"),\n  currentPosition: text(\"current_position\"),\n  phone: text(\"phone\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Departments table\nexport const departments = pgTable(\"departments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull().unique(),\n  code: text(\"code\").notNull().unique(),\n  description: text(\"description\"),\n  headOfDepartment: text(\"head_of_department\"),\n  studentCount: integer(\"student_count\").default(0),\n  facultyCount: integer(\"faculty_count\").default(0),\n  programs: jsonb(\"programs\").$type<string[]>().default([]),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Announcements table\nexport const announcements = pgTable(\"announcements\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  category: text(\"category\").notNull(), // admissions, examinations, achievements, events\n  content: text(\"content\").notNull(),\n  publishedAt: timestamp(\"published_at\").defaultNow().notNull(),\n  expiresAt: timestamp(\"expires_at\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdBy: varchar(\"created_by\").references(() => users.id),\n});\n\n// Events table\nexport const events = pgTable(\"events\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  category: text(\"category\").notNull(), // cultural, workshop, seminar, sports\n  eventDate: timestamp(\"event_date\").notNull(),\n  startTime: text(\"start_time\").notNull(),\n  endTime: text(\"end_time\").notNull(),\n  location: text(\"location\").notNull(),\n  maxRegistrations: integer(\"max_registrations\"),\n  currentRegistrations: integer(\"current_registrations\").default(0),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Event Registrations table\nexport const eventRegistrations = pgTable(\"event_registrations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  eventId: varchar(\"event_id\").references(() => events.id).notNull(),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  registeredAt: timestamp(\"registered_at\").defaultNow().notNull(),\n});\n\n// Placements table\nexport const placements = pgTable(\"placements\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  studentId: varchar(\"student_id\").references(() => students.id).notNull(),\n  company: text(\"company\").notNull(),\n  position: text(\"position\").notNull(),\n  packageAmount: decimal(\"package_amount\", { precision: 10, scale: 2 }).notNull(),\n  placementYear: integer(\"placement_year\").notNull(),\n  placementDate: timestamp(\"placement_date\").defaultNow().notNull(),\n});\n\n// Admissions table\nexport const admissions = pgTable(\"admissions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  fullName: text(\"full_name\").notNull(),\n  email: text(\"email\").notNull(),\n  phone: text(\"phone\").notNull(),\n  program: text(\"program\").notNull(),\n  department: text(\"department\").notNull(),\n  academicRecords: jsonb(\"academic_records\").$type<any>(),\n  status: text(\"status\").default(\"pending\"), // pending, approved, rejected\n  applicationDate: timestamp(\"application_date\").defaultNow().notNull(),\n  reviewedBy: varchar(\"reviewed_by\").references(() => users.id),\n  reviewedAt: timestamp(\"reviewed_at\"),\n});\n\n// Exam Results table\nexport const examResults = pgTable(\"exam_results\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  studentId: varchar(\"student_id\").references(() => students.id).notNull(),\n  semester: integer(\"semester\").notNull(),\n  subject: text(\"subject\").notNull(),\n  marks: integer(\"marks\").notNull(),\n  maxMarks: integer(\"max_marks\").notNull(),\n  grade: text(\"grade\"),\n  examDate: timestamp(\"exam_date\").notNull(),\n  publishedAt: timestamp(\"published_at\").defaultNow().notNull(),\n});\n\n// Assignments table\nexport const assignments = pgTable(\"assignments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  subject: text(\"subject\").notNull(),\n  department: text(\"department\").notNull(),\n  semester: integer(\"semester\").notNull(),\n  dueDate: timestamp(\"due_date\").notNull(),\n  createdBy: varchar(\"created_by\").references(() => faculty.id).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Notifications table\nexport const notifications = pgTable(\"notifications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  title: text(\"title\").notNull(),\n  message: text(\"message\").notNull(),\n  isRead: boolean(\"is_read\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Contact submissions table\nexport const contactSubmissions = pgTable(\"contact_submissions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull(),\n  phone: text(\"phone\"),\n  subject: text(\"subject\").notNull(),\n  message: text(\"message\").notNull(),\n  status: text(\"status\").default(\"new\"), // new, responded, closed\n  submittedAt: timestamp(\"submitted_at\").defaultNow().notNull(),\n});\n\n// Insert schemas\nexport const upsertUserSchema = createInsertSchema(users).omit({ createdAt: true, updatedAt: true });\nexport const insertUserSchema = createInsertSchema(users).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertStudentSchema = createInsertSchema(students).omit({ id: true, createdAt: true });\nexport const insertFacultySchema = createInsertSchema(faculty).omit({ id: true, createdAt: true });\nexport const insertAlumniSchema = createInsertSchema(alumni).omit({ id: true, createdAt: true });\nexport const insertDepartmentSchema = createInsertSchema(departments).omit({ id: true, createdAt: true });\nexport const insertAnnouncementSchema = createInsertSchema(announcements).omit({ id: true, publishedAt: true });\nexport const insertEventSchema = createInsertSchema(events).omit({ id: true, createdAt: true });\nexport const insertEventRegistrationSchema = createInsertSchema(eventRegistrations).omit({ id: true, registeredAt: true });\nexport const insertPlacementSchema = createInsertSchema(placements).omit({ id: true, placementDate: true });\nexport const insertAdmissionSchema = createInsertSchema(admissions).omit({ id: true, applicationDate: true, reviewedBy: true, reviewedAt: true });\nexport const insertExamResultSchema = createInsertSchema(examResults).omit({ id: true, publishedAt: true });\nexport const insertAssignmentSchema = createInsertSchema(assignments).omit({ id: true, createdAt: true });\nexport const insertNotificationSchema = createInsertSchema(notifications).omit({ id: true, createdAt: true });\nexport const insertContactSubmissionSchema = createInsertSchema(contactSubmissions).omit({ id: true, submittedAt: true });\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type UpsertUser = z.infer<typeof upsertUserSchema>;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Student = typeof students.$inferSelect;\nexport type InsertStudent = z.infer<typeof insertStudentSchema>;\nexport type Faculty = typeof faculty.$inferSelect;\nexport type InsertFaculty = z.infer<typeof insertFacultySchema>;\nexport type Alumni = typeof alumni.$inferSelect;\nexport type InsertAlumni = z.infer<typeof insertAlumniSchema>;\nexport type Department = typeof departments.$inferSelect;\nexport type InsertDepartment = z.infer<typeof insertDepartmentSchema>;\nexport type Announcement = typeof announcements.$inferSelect;\nexport type InsertAnnouncement = z.infer<typeof insertAnnouncementSchema>;\nexport type Event = typeof events.$inferSelect;\nexport type InsertEvent = z.infer<typeof insertEventSchema>;\nexport type EventRegistration = typeof eventRegistrations.$inferSelect;\nexport type InsertEventRegistration = z.infer<typeof insertEventRegistrationSchema>;\nexport type Placement = typeof placements.$inferSelect;\nexport type InsertPlacement = z.infer<typeof insertPlacementSchema>;\nexport type Admission = typeof admissions.$inferSelect;\nexport type InsertAdmission = z.infer<typeof insertAdmissionSchema>;\nexport type ExamResult = typeof examResults.$inferSelect;\nexport type InsertExamResult = z.infer<typeof insertExamResultSchema>;\nexport type Assignment = typeof assignments.$inferSelect;\nexport type InsertAssignment = z.infer<typeof insertAssignmentSchema>;\nexport type Notification = typeof notifications.$inferSelect;\nexport type InsertNotification = z.infer<typeof insertNotificationSchema>;\nexport type ContactSubmission = typeof contactSubmissions.$inferSelect;\nexport type InsertContactSubmission = z.infer<typeof insertContactSubmissionSchema>;\n","size_bytes":11446},"client/src/components/examples/HeroSlider.tsx":{"content":"import { HeroSlider } from \"../HeroSlider\";\n\nexport default function HeroSliderExample() {\n  return <HeroSlider />;\n}\n","size_bytes":118},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/examples/Footer.tsx":{"content":"import { Footer } from \"../Footer\";\n\nexport default function FooterExample() {\n  return <Footer />;\n}\n","size_bytes":102},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Contact.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Header } from \"@/components/Header\";\nimport { Footer } from \"@/components/Footer\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { MapPin, Phone, Mail, Clock } from \"lucide-react\";\n\nexport default function Contact() {\n  const { toast } = useToast();\n  const [formData, setFormData] = useState({\n    name: \"\",\n    email: \"\",\n    phone: \"\",\n    subject: \"\",\n    message: \"\",\n  });\n\n  const submitMutation = useMutation({\n    mutationFn: async (data: typeof formData) => {\n      await apiRequest(\"/api/contact\", \"POST\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Message sent successfully! We'll get back to you soon.\",\n      });\n      setFormData({ name: \"\", email: \"\", phone: \"\", subject: \"\", message: \"\" });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to send message\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    submitMutation.mutate(formData);\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header />\n      <main className=\"flex-1\">\n        <div className=\"bg-gradient-to-br from-primary/10 via-accent/5 to-background py-16 px-6\">\n          <div className=\"max-w-7xl mx-auto text-center\">\n            <h1 className=\"text-4xl md:text-5xl font-bold mb-4\">Contact Us</h1>\n            <p className=\"text-lg text-muted-foreground max-w-3xl mx-auto\">\n              Get in touch with us for admissions, queries, or campus visits\n            </p>\n          </div>\n        </div>\n\n        <div className=\"px-6 py-16\">\n          <div className=\"max-w-7xl mx-auto\">\n            <div className=\"grid lg:grid-cols-3 gap-8 mb-12\">\n              <Card className=\"p-6\">\n                <MapPin className=\"h-8 w-8 text-primary mb-4\" />\n                <h3 className=\"font-semibold mb-2\">Address</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  123 College Road, Technology Park<br />\n                  Bangalore, Karnataka - 560001<br />\n                  India\n                </p>\n              </Card>\n              <Card className=\"p-6\">\n                <Phone className=\"h-8 w-8 text-primary mb-4\" />\n                <h3 className=\"font-semibold mb-2\">Phone</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Main: +91 80 1234 5678<br />\n                  Admissions: +91 80 1234 5679<br />\n                  Placements: +91 80 1234 5680\n                </p>\n              </Card>\n              <Card className=\"p-6\">\n                <Mail className=\"h-8 w-8 text-primary mb-4\" />\n                <h3 className=\"font-semibold mb-2\">Email</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  General: info@jits.edu.in<br />\n                  Admissions: admissions@jits.edu.in<br />\n                  Support: support@jits.edu.in\n                </p>\n              </Card>\n            </div>\n\n            <div className=\"grid lg:grid-cols-2 gap-8\">\n              <Card className=\"p-8\">\n                <h2 className=\"text-2xl font-bold mb-6\">Send us a Message</h2>\n                <form onSubmit={handleSubmit} className=\"space-y-4\">\n                  <div className=\"grid md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"name\">Name</Label>\n                      <Input \n                        id=\"name\" \n                        placeholder=\"Your name\" \n                        value={formData.name}\n                        onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                        required\n                        data-testid=\"input-contact-name\" \n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"email\">Email</Label>\n                      <Input \n                        id=\"email\" \n                        type=\"email\" \n                        placeholder=\"your@email.com\"\n                        value={formData.email}\n                        onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n                        required\n                        data-testid=\"input-contact-email\" \n                      />\n                    </div>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"phone\">Phone</Label>\n                    <Input \n                      id=\"phone\" \n                      placeholder=\"+91 1234567890\"\n                      value={formData.phone}\n                      onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\n                      data-testid=\"input-contact-phone\" \n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"subject\">Subject</Label>\n                    <Input \n                      id=\"subject\" \n                      placeholder=\"How can we help?\"\n                      value={formData.subject}\n                      onChange={(e) => setFormData({ ...formData, subject: e.target.value })}\n                      required\n                      data-testid=\"input-contact-subject\" \n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"message\">Message</Label>\n                    <Textarea \n                      id=\"message\" \n                      placeholder=\"Your message...\" \n                      rows={5}\n                      value={formData.message}\n                      onChange={(e) => setFormData({ ...formData, message: e.target.value })}\n                      required\n                      data-testid=\"input-contact-message\" \n                    />\n                  </div>\n                  <Button type=\"submit\" className=\"w-full\" disabled={submitMutation.isPending} data-testid=\"button-contact-submit\">\n                    {submitMutation.isPending ? \"Sending...\" : \"Send Message\"}\n                  </Button>\n                </form>\n              </Card>\n\n              <div className=\"space-y-6\">\n                <Card className=\"p-6\">\n                  <div className=\"flex items-start gap-4\">\n                    <Clock className=\"h-8 w-8 text-primary flex-shrink-0\" />\n                    <div>\n                      <h3 className=\"font-semibold mb-2\">Office Hours</h3>\n                      <div className=\"text-sm text-muted-foreground space-y-1\">\n                        <p>Monday - Friday: 9:00 AM - 5:00 PM</p>\n                        <p>Saturday: 9:00 AM - 2:00 PM</p>\n                        <p>Sunday: Closed</p>\n                      </div>\n                    </div>\n                  </div>\n                </Card>\n\n                <Card className=\"p-6 bg-muted/50\">\n                  <h3 className=\"font-semibold mb-4\">Campus Location</h3>\n                  <div className=\"aspect-video bg-muted rounded-lg flex items-center justify-center\">\n                    <p className=\"text-sm text-muted-foreground\">Interactive Map</p>\n                  </div>\n                  <Button variant=\"outline\" className=\"w-full mt-4\" data-testid=\"button-get-directions\">\n                    Get Directions\n                  </Button>\n                </Card>\n              </div>\n            </div>\n          </div>\n        </div>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":7805},"client/src/components/HeroSlider.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\n\nconst slides = [\n  {\n    title: \"Admissions Open 2026\",\n    subtitle: \"Join India's Leading Institute of Technology & Science\",\n    cta1: { text: \"Apply Now\", href: \"/admissions/apply\" },\n    cta2: { text: \"Visit Campus\", href: \"/contact\" },\n    bgGradient: \"from-blue-600 via-blue-700 to-blue-800\",\n  },\n  {\n    title: \"100% Placement Record\",\n    subtitle: \"Top Companies Visit Our Campus Every Year\",\n    cta1: { text: \"View Placements\", href: \"/placements/records\" },\n    cta2: { text: \"Contact Us\", href: \"/contact\" },\n    bgGradient: \"from-emerald-600 via-emerald-700 to-emerald-800\",\n  },\n  {\n    title: \"State-of-the-Art Facilities\",\n    subtitle: \"Modern Labs, Library & Sports Complex\",\n    cta1: { text: \"Explore Campus\", href: \"/about/vision\" },\n    cta2: { text: \"Learn More\", href: \"/about/vision\" },\n    bgGradient: \"from-purple-600 via-purple-700 to-purple-800\",\n  },\n];\n\nexport function HeroSlider() {\n  const [current, setCurrent] = useState(0);\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setCurrent((prev) => (prev + 1) % slides.length);\n    }, 5000);\n    return () => clearInterval(timer);\n  }, []);\n\n  const next = () => setCurrent((prev) => (prev + 1) % slides.length);\n  const prev = () => setCurrent((prev) => (prev - 1 + slides.length) % slides.length);\n\n  return (\n    <div className=\"relative h-[90vh] overflow-hidden\">\n      {slides.map((slide, index) => (\n        <div\n          key={index}\n          className={`absolute inset-0 transition-opacity duration-700 ${\n            index === current ? \"opacity-100\" : \"opacity-0\"\n          }`}\n        >\n          <div className={`absolute inset-0 bg-gradient-to-br ${slide.bgGradient}`}>\n            <div className=\"absolute inset-0 bg-black/40\" />\n          </div>\n          \n          <div className=\"relative h-full flex items-center justify-center\">\n            <div className=\"max-w-5xl mx-auto px-6 text-center text-white\">\n              <h1 className=\"text-5xl md:text-7xl font-bold mb-6 animate-in fade-in slide-in-from-bottom-4 duration-700\">\n                {slide.title}\n              </h1>\n              <p className=\"text-xl md:text-2xl mb-8 text-white/90 animate-in fade-in slide-in-from-bottom-4 duration-700 delay-150\">\n                {slide.subtitle}\n              </p>\n              <div className=\"flex flex-wrap items-center justify-center gap-4 animate-in fade-in slide-in-from-bottom-4 duration-700 delay-300\">\n                <Button\n                  size=\"lg\"\n                  className=\"bg-white text-primary hover:bg-white/90 border-white\"\n                  asChild\n                  data-testid={`button-hero-${slide.cta1.text.toLowerCase().replace(/\\s+/g, '-')}`}\n                >\n                  <Link href={slide.cta1.href}>{slide.cta1.text}</Link>\n                </Button>\n                <Button\n                  size=\"lg\"\n                  variant=\"outline\"\n                  className=\"bg-white/10 border-white/30 text-white hover:bg-white/20 backdrop-blur-md\"\n                  asChild\n                  data-testid={`button-hero-${slide.cta2.text.toLowerCase().replace(/\\s+/g, '-')}`}\n                >\n                  <Link href={slide.cta2.href}>{slide.cta2.text}</Link>\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      ))}\n\n      <Button\n        variant=\"ghost\"\n        size=\"icon\"\n        className=\"absolute left-4 top-1/2 -translate-y-1/2 h-12 w-12 bg-white/10 hover:bg-white/20 text-white backdrop-blur-md\"\n        onClick={prev}\n        data-testid=\"button-hero-prev\"\n      >\n        <ChevronLeft className=\"h-6 w-6\" />\n      </Button>\n      <Button\n        variant=\"ghost\"\n        size=\"icon\"\n        className=\"absolute right-4 top-1/2 -translate-y-1/2 h-12 w-12 bg-white/10 hover:bg-white/20 text-white backdrop-blur-md\"\n        onClick={next}\n        data-testid=\"button-hero-next\"\n      >\n        <ChevronRight className=\"h-6 w-6\" />\n      </Button>\n\n      <div className=\"absolute bottom-8 left-1/2 -translate-x-1/2 flex gap-2\">\n        {slides.map((_, index) => (\n          <button\n            key={index}\n            className={`h-2 rounded-full transition-all ${\n              index === current ? \"w-8 bg-white\" : \"w-2 bg-white/50\"\n            }`}\n            onClick={() => setCurrent(index)}\n            data-testid={`button-hero-indicator-${index}`}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n","size_bytes":4608},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/pages/StudentDashboard.tsx":{"content":"import { Header } from \"@/components/Header\";\nimport { Footer } from \"@/components/Footer\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Calendar, FileText, Download, DollarSign, BookOpen, Bell, Loader2 } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { formatDistanceToNow } from \"date-fns\";\n\nexport default function StudentDashboard() {\n  const { data, isLoading, error } = useQuery({\n    queryKey: ['/api/student/dashboard'],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex flex-col\">\n        <Header />\n        <main className=\"flex-1 flex items-center justify-center\">\n          <div className=\"text-center\" data-testid=\"loading-dashboard\">\n            <Loader2 className=\"h-8 w-8 animate-spin mx-auto mb-4 text-primary\" />\n            <p className=\"text-muted-foreground\">Loading dashboard...</p>\n          </div>\n        </main>\n        <Footer />\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen flex flex-col\">\n        <Header />\n        <main className=\"flex-1 flex items-center justify-center\">\n          <div className=\"text-center\" data-testid=\"error-dashboard\">\n            <p className=\"text-destructive mb-4\">Failed to load dashboard data</p>\n            <p className=\"text-sm text-muted-foreground\">Please try refreshing the page</p>\n          </div>\n        </main>\n        <Footer />\n      </div>\n    );\n  }\n\n  const student = data?.student;\n  const notifications = data?.notifications || [];\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header />\n      <main className=\"flex-1 px-6 py-8 bg-muted/30\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"mb-8\">\n            <h1 className=\"text-3xl font-bold mb-2\" data-testid=\"text-student-name\">Welcome back, {student?.name || 'Student'}!</h1>\n            <p className=\"text-muted-foreground\" data-testid=\"text-student-details\">\n              {student?.rollNumber} • {student?.program} • {student?.semester ? `Semester ${student.semester}` : ''}\n            </p>\n          </div>\n\n          <div className=\"grid lg:grid-cols-3 gap-6 mb-8\">\n            <Card className=\"p-6\" data-testid=\"card-attendance\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h3 className=\"font-semibold\">Attendance</h3>\n                <Calendar className=\"h-5 w-5 text-muted-foreground\" />\n              </div>\n              <div className=\"text-3xl font-bold mb-2\" data-testid=\"text-attendance\">{student?.attendance || 0}%</div>\n              <Progress value={student?.attendance || 0} className=\"mb-2\" />\n              <p className=\"text-sm text-muted-foreground\">\n                {(student?.attendance || 0) >= 75 ? 'Good standing' : 'Below requirement'}\n              </p>\n            </Card>\n\n            <Card className=\"p-6\" data-testid=\"card-cgpa\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h3 className=\"font-semibold\">CGPA</h3>\n                <BookOpen className=\"h-5 w-5 text-muted-foreground\" />\n              </div>\n              <div className=\"text-3xl font-bold mb-2\" data-testid=\"text-cgpa\">{student?.cgpa || 'N/A'}</div>\n              <p className=\"text-sm text-muted-foreground\">\n                {student?.semester ? `Semester ${student.semester}` : 'Current semester'}\n              </p>\n            </Card>\n\n            <Card className=\"p-6\" data-testid=\"card-fee-status\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h3 className=\"font-semibold\">Fee Status</h3>\n                <DollarSign className=\"h-5 w-5 text-muted-foreground\" />\n              </div>\n              <Badge \n                variant={student?.feesPaid ? 'default' : 'destructive'} \n                className={student?.feesPaid ? 'bg-emerald-100 text-emerald-700 dark:bg-emerald-900/30 dark:text-emerald-400' : ''}\n                data-testid=\"badge-fee-status\"\n              >\n                {student?.feesPaid ? 'Paid' : 'Pending'}\n              </Badge>\n              <p className=\"text-sm text-muted-foreground mt-2\">\n                {student?.feesPaid ? 'All clear for this semester' : 'Please clear pending fees'}\n              </p>\n            </Card>\n          </div>\n\n          <div className=\"grid lg:grid-cols-2 gap-6\">\n            <Card className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <h2 className=\"text-xl font-semibold\">Recent Notifications</h2>\n                <Bell className=\"h-5 w-5 text-muted-foreground\" />\n              </div>\n              <div className=\"space-y-4\">\n                {notifications.length > 0 ? (\n                  notifications.slice(0, 5).map((notif: any) => (\n                    <div key={notif.id} className=\"flex gap-3 pb-4 border-b last:border-0\" data-testid={`notification-${notif.id}`}>\n                      <div className={`h-2 w-2 rounded-full mt-2 flex-shrink-0 ${notif.isRead ? 'bg-muted' : 'bg-primary'}`} />\n                      <div className=\"flex-1\">\n                        <p className=\"text-sm\">{notif.message || notif.text}</p>\n                        <p className=\"text-xs text-muted-foreground mt-1\">\n                          {notif.createdAt ? formatDistanceToNow(new Date(notif.createdAt), { addSuffix: true }) : 'Recently'}\n                        </p>\n                      </div>\n                    </div>\n                  ))\n                ) : (\n                  <p className=\"text-sm text-muted-foreground text-center py-4\">No new notifications</p>\n                )}\n              </div>\n            </Card>\n\n            <Card className=\"p-6\">\n              <h2 className=\"text-xl font-semibold mb-6\">Quick Actions</h2>\n              <div className=\"grid gap-3\">\n                <Button variant=\"outline\" className=\"justify-start\" data-testid=\"button-view-timetable\">\n                  <Calendar className=\"h-4 w-4 mr-2\" />\n                  View Exam Timetable\n                </Button>\n                <Button variant=\"outline\" className=\"justify-start\" data-testid=\"button-check-results\">\n                  <FileText className=\"h-4 w-4 mr-2\" />\n                  Check Results\n                </Button>\n                <Button variant=\"outline\" className=\"justify-start\" data-testid=\"button-download-hall-ticket\">\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Download Hall Ticket\n                </Button>\n                <Button variant=\"outline\" className=\"justify-start\" data-testid=\"button-view-assignments\">\n                  <BookOpen className=\"h-4 w-4 mr-2\" />\n                  View Assignments\n                </Button>\n              </div>\n            </Card>\n          </div>\n        </div>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":6991},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"client/src/components/QuickLinks.tsx":{"content":"import { Link } from \"wouter\";\nimport { Card } from \"@/components/ui/card\";\nimport { GraduationCap, User, Users, FileText, Download, Award } from \"lucide-react\";\n\nconst links = [\n  {\n    title: \"Student Portal\",\n    description: \"Access attendance, results & assignments\",\n    icon: GraduationCap,\n    href: \"/student/login\",\n    color: \"text-blue-600 dark:text-blue-400\",\n  },\n  {\n    title: \"Faculty Portal\",\n    description: \"Manage grades, attendance & notices\",\n    icon: User,\n    href: \"/faculty/login\",\n    color: \"text-emerald-600 dark:text-emerald-400\",\n  },\n  {\n    title: \"Alumni Portal\",\n    description: \"Connect with alumni network\",\n    icon: Users,\n    href: \"/alumni/login\",\n    color: \"text-purple-600 dark:text-purple-400\",\n  },\n  {\n    title: \"Exam Results\",\n    description: \"Check latest examination results\",\n    icon: FileText,\n    href: \"/examinations/results\",\n    color: \"text-amber-600 dark:text-amber-400\",\n  },\n  {\n    title: \"Downloads\",\n    description: \"Forms, syllabus & documents\",\n    icon: Download,\n    href: \"/downloads\",\n    color: \"text-rose-600 dark:text-rose-400\",\n  },\n  {\n    title: \"Achievements\",\n    description: \"Awards & recognitions\",\n    icon: Award,\n    href: \"/about/achievements\",\n    color: \"text-indigo-600 dark:text-indigo-400\",\n  },\n];\n\nexport function QuickLinks() {\n  return (\n    <section className=\"py-16 px-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-3xl md:text-4xl font-bold mb-4\">Quick Links</h2>\n          <p className=\"text-muted-foreground text-lg\">Access essential services and information</p>\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {links.map((link) => (\n            <Link \n              key={link.title} \n              href={link.href}\n              data-testid={`link-quick-${link.title.toLowerCase().replace(/\\s+/g, '-')}`}\n            >\n              <Card className=\"p-6 hover-elevate active-elevate-2 transition-all cursor-pointer h-full\">\n                <div className=\"flex items-start gap-4\">\n                  <div className={`${link.color}`}>\n                    <link.icon className=\"h-8 w-8\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-semibold text-lg mb-1\">{link.title}</h3>\n                    <p className=\"text-sm text-muted-foreground\">{link.description}</p>\n                  </div>\n                </div>\n              </Card>\n            </Link>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":2614},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/pages/Admissions.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Header } from \"@/components/Header\";\nimport { Footer } from \"@/components/Footer\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { CheckCircle2, Calendar, FileText, DollarSign } from \"lucide-react\";\n\nexport default function Admissions() {\n  const { toast } = useToast();\n  const [showForm, setShowForm] = useState(false);\n  const [formData, setFormData] = useState({\n    fullName: \"\",\n    email: \"\",\n    phone: \"\",\n    program: \"\",\n    department: \"\",\n  });\n\n  const submitMutation = useMutation({\n    mutationFn: async (data: typeof formData) => {\n      await apiRequest(\"/api/admissions\", \"POST\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Application submitted successfully! We'll contact you soon.\",\n      });\n      setShowForm(false);\n      setFormData({ fullName: \"\", email: \"\", phone: \"\", program: \"\", department: \"\" });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to submit application\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    submitMutation.mutate(formData);\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header />\n      <main className=\"flex-1\">\n        <div className=\"bg-gradient-to-br from-blue-600 via-blue-700 to-blue-800 text-white py-20 px-6\">\n          <div className=\"max-w-7xl mx-auto text-center\">\n            <Badge className=\"mb-4 bg-white/20 text-white border-white/30\">Admissions Open 2026</Badge>\n            <h1 className=\"text-4xl md:text-5xl font-bold mb-4\">Join JITS</h1>\n            <p className=\"text-xl text-white/90 max-w-3xl mx-auto mb-8\">\n              Shape your future with quality education and industry-ready skills\n            </p>\n            <Button \n              size=\"lg\" \n              className=\"bg-white text-primary hover:bg-white/90\" \n              onClick={() => setShowForm(!showForm)}\n              data-testid=\"button-apply-now\"\n            >\n              {showForm ? \"Hide Application Form\" : \"Apply Now\"}\n            </Button>\n          </div>\n        </div>\n\n        {showForm && (\n          <div className=\"px-6 py-16 bg-muted/30\">\n            <div className=\"max-w-2xl mx-auto\">\n              <Card className=\"p-8\">\n                <h2 className=\"text-2xl font-bold mb-6\">Application Form</h2>\n                <form onSubmit={handleSubmit} className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"fullName\">Full Name</Label>\n                    <Input\n                      id=\"fullName\"\n                      value={formData.fullName}\n                      onChange={(e) => setFormData({ ...formData, fullName: e.target.value })}\n                      required\n                      data-testid=\"input-admission-name\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"email\">Email</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      value={formData.email}\n                      onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n                      required\n                      data-testid=\"input-admission-email\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"phone\">Phone</Label>\n                    <Input\n                      id=\"phone\"\n                      value={formData.phone}\n                      onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\n                      required\n                      data-testid=\"input-admission-phone\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"program\">Program</Label>\n                    <Select value={formData.program} onValueChange={(value) => setFormData({ ...formData, program: value })}>\n                      <SelectTrigger data-testid=\"select-admission-program\">\n                        <SelectValue placeholder=\"Select program\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"btech\">B.Tech</SelectItem>\n                        <SelectItem value=\"mtech\">M.Tech</SelectItem>\n                        <SelectItem value=\"mba\">MBA</SelectItem>\n                        <SelectItem value=\"bsc\">BSc</SelectItem>\n                        <SelectItem value=\"msc\">MSc</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"department\">Department</Label>\n                    <Select value={formData.department} onValueChange={(value) => setFormData({ ...formData, department: value })}>\n                      <SelectTrigger data-testid=\"select-admission-department\">\n                        <SelectValue placeholder=\"Select department\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"Computer Science & Engineering\">Computer Science & Engineering</SelectItem>\n                        <SelectItem value=\"Electronics & Communication\">Electronics & Communication</SelectItem>\n                        <SelectItem value=\"Mechanical Engineering\">Mechanical Engineering</SelectItem>\n                        <SelectItem value=\"Civil Engineering\">Civil Engineering</SelectItem>\n                        <SelectItem value=\"Chemical Engineering\">Chemical Engineering</SelectItem>\n                        <SelectItem value=\"Applied Sciences\">Applied Sciences</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <Button type=\"submit\" className=\"w-full\" disabled={submitMutation.isPending} data-testid=\"button-submit-admission\">\n                    {submitMutation.isPending ? \"Submitting...\" : \"Submit Application\"}\n                  </Button>\n                </form>\n              </Card>\n            </div>\n          </div>\n        )}\n\n        <div className=\"px-6 py-16\">\n          <div className=\"max-w-7xl mx-auto\">\n            <h2 className=\"text-3xl font-bold text-center mb-12\">Admission Process</h2>\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              {[\n                { step: \"1\", title: \"Apply Online\", desc: \"Fill the application form with required details\" },\n                { step: \"2\", title: \"Document Verification\", desc: \"Submit academic documents for verification\" },\n                { step: \"3\", title: \"Entrance Test\", desc: \"Appear for entrance examination or use JEE/NEET scores\" },\n                { step: \"4\", title: \"Admission Confirmation\", desc: \"Pay fees and confirm your admission\" },\n              ].map((item, index) => (\n                <Card key={index} className=\"p-6 text-center\">\n                  <div className=\"h-12 w-12 rounded-full bg-primary text-primary-foreground flex items-center justify-center mx-auto mb-4 text-xl font-bold\">\n                    {item.step}\n                  </div>\n                  <h3 className=\"font-semibold mb-2\">{item.title}</h3>\n                  <p className=\"text-sm text-muted-foreground\">{item.desc}</p>\n                </Card>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"px-6 py-16 bg-muted/30\">\n          <div className=\"max-w-4xl mx-auto\">\n            <h2 className=\"text-3xl font-bold mb-8\">Eligibility Criteria</h2>\n            <Card className=\"p-6\">\n              <div className=\"space-y-4\">\n                <div>\n                  <h3 className=\"font-semibold mb-2\">B.Tech Programs</h3>\n                  <ul className=\"space-y-2\">\n                    <li className=\"flex items-start gap-2\">\n                      <CheckCircle2 className=\"h-5 w-5 text-emerald-600 dark:text-emerald-400 mt-0.5 flex-shrink-0\" />\n                      <span className=\"text-sm\">10+2 with Physics, Chemistry, and Mathematics with minimum 60% marks</span>\n                    </li>\n                    <li className=\"flex items-start gap-2\">\n                      <CheckCircle2 className=\"h-5 w-5 text-emerald-600 dark:text-emerald-400 mt-0.5 flex-shrink-0\" />\n                      <span className=\"text-sm\">Valid JEE Main score or State Entrance Exam score</span>\n                    </li>\n                  </ul>\n                </div>\n                <div>\n                  <h3 className=\"font-semibold mb-2\">M.Tech Programs</h3>\n                  <ul className=\"space-y-2\">\n                    <li className=\"flex items-start gap-2\">\n                      <CheckCircle2 className=\"h-5 w-5 text-emerald-600 dark:text-emerald-400 mt-0.5 flex-shrink-0\" />\n                      <span className=\"text-sm\">B.Tech/BE degree with minimum 60% marks</span>\n                    </li>\n                    <li className=\"flex items-start gap-2\">\n                      <CheckCircle2 className=\"h-5 w-5 text-emerald-600 dark:text-emerald-400 mt-0.5 flex-shrink-0\" />\n                      <span className=\"text-sm\">Valid GATE score required</span>\n                    </li>\n                  </ul>\n                </div>\n              </div>\n            </Card>\n          </div>\n        </div>\n\n        <div className=\"px-6 py-16\">\n          <div className=\"max-w-7xl mx-auto\">\n            <h2 className=\"text-3xl font-bold text-center mb-12\">Important Information</h2>\n            <div className=\"grid md:grid-cols-3 gap-6\">\n              <Card className=\"p-6\">\n                <Calendar className=\"h-8 w-8 text-blue-600 dark:text-blue-400 mb-4\" />\n                <h3 className=\"font-semibold mb-2\">Important Dates</h3>\n                <div className=\"space-y-2 text-sm text-muted-foreground\">\n                  <p>Application Start: Jan 15, 2026</p>\n                  <p>Application End: May 31, 2026</p>\n                  <p>Entrance Test: June 2026</p>\n                  <p>Classes Start: August 2026</p>\n                </div>\n              </Card>\n              <Card className=\"p-6\">\n                <FileText className=\"h-8 w-8 text-emerald-600 dark:text-emerald-400 mb-4\" />\n                <h3 className=\"font-semibold mb-2\">Required Documents</h3>\n                <div className=\"space-y-2 text-sm text-muted-foreground\">\n                  <p>10th & 12th Marksheets</p>\n                  <p>Transfer Certificate</p>\n                  <p>Entrance Exam Score Card</p>\n                  <p>ID Proof & Photographs</p>\n                </div>\n              </Card>\n              <Card className=\"p-6\">\n                <DollarSign className=\"h-8 w-8 text-amber-600 dark:text-amber-400 mb-4\" />\n                <h3 className=\"font-semibold mb-2\">Fee Structure</h3>\n                <div className=\"space-y-2 text-sm text-muted-foreground\">\n                  <p>B.Tech: ₹1,50,000/year</p>\n                  <p>M.Tech: ₹1,00,000/year</p>\n                  <p>Hostel: ₹60,000/year</p>\n                  <p>Scholarships Available</p>\n                </div>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":11736},"client/src/pages/Home.tsx":{"content":"import { Header } from \"@/components/Header\";\nimport { HeroSlider } from \"@/components/HeroSlider\";\nimport { QuickLinks } from \"@/components/QuickLinks\";\nimport { AboutSection } from \"@/components/AboutSection\";\nimport { AnnouncementsCarousel } from \"@/components/AnnouncementsCarousel\";\nimport { EventsPreview } from \"@/components/EventsPreview\";\nimport { Footer } from \"@/components/Footer\";\n\nexport default function Home() {\n  return (\n    <div className=\"min-h-screen\">\n      <Header />\n      <main>\n        <HeroSlider />\n        <QuickLinks />\n        <AboutSection />\n        <AnnouncementsCarousel />\n        <EventsPreview />\n      </main>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":684},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/examples/Header.tsx":{"content":"import { Header } from \"../Header\";\nimport { ThemeProvider } from \"../ThemeProvider\";\n\nexport default function HeaderExample() {\n  return (\n    <ThemeProvider>\n      <Header />\n    </ThemeProvider>\n  );\n}\n","size_bytes":205},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"server/storage.ts":{"content":"import { db } from \"./db\";\nimport { \n  users, students, faculty, alumni, departments, announcements, events, \n  eventRegistrations, placements, admissions, examResults, assignments, \n  notifications, contactSubmissions,\n  type User, type UpsertUser, type InsertUser, type Student, type InsertStudent,\n  type Faculty, type InsertFaculty, type Alumni, type InsertAlumni,\n  type Department, type InsertDepartment, type Announcement, type InsertAnnouncement,\n  type Event, type InsertEvent, type EventRegistration, type InsertEventRegistration,\n  type Placement, type InsertPlacement, type Admission, type InsertAdmission,\n  type ExamResult, type InsertExamResult, type Assignment, type InsertAssignment,\n  type Notification, type InsertNotification, type ContactSubmission, type InsertContactSubmission\n} from \"@shared/schema\";\nimport { eq, desc, and, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Student operations\n  getStudent(userId: string): Promise<Student | undefined>;\n  getStudentByRollNumber(rollNumber: string): Promise<Student | undefined>;\n  createStudent(student: InsertStudent): Promise<Student>;\n  updateStudentAttendance(id: string, attendance: number): Promise<void>;\n  \n  // Faculty operations\n  getFaculty(userId: string): Promise<Faculty | undefined>;\n  getFacultyByEmployeeId(employeeId: string): Promise<Faculty | undefined>;\n  createFaculty(faculty: InsertFaculty): Promise<Faculty>;\n  \n  // Alumni operations\n  getAlumni(userId: string): Promise<Alumni | undefined>;\n  createAlumni(alumni: InsertAlumni): Promise<Alumni>;\n  \n  // Department operations\n  getAllDepartments(): Promise<Department[]>;\n  getDepartment(id: string): Promise<Department | undefined>;\n  createDepartment(department: InsertDepartment): Promise<Department>;\n  \n  // Announcement operations\n  getActiveAnnouncements(): Promise<Announcement[]>;\n  createAnnouncement(announcement: InsertAnnouncement): Promise<Announcement>;\n  \n  // Event operations\n  getActiveEvents(): Promise<Event[]>;\n  getEvent(id: string): Promise<Event | undefined>;\n  createEvent(event: InsertEvent): Promise<Event>;\n  registerForEvent(registration: InsertEventRegistration): Promise<EventRegistration>;\n  \n  // Placement operations\n  getRecentPlacements(limit?: number): Promise<Placement[]>;\n  createPlacement(placement: InsertPlacement): Promise<Placement>;\n  \n  // Admission operations\n  createAdmission(admission: InsertAdmission): Promise<Admission>;\n  getAllAdmissions(): Promise<Admission[]>;\n  updateAdmissionStatus(id: string, status: string, reviewedBy: string): Promise<void>;\n  \n  // Exam results operations\n  getStudentResults(studentId: string): Promise<ExamResult[]>;\n  createExamResult(result: InsertExamResult): Promise<ExamResult>;\n  \n  // Assignment operations\n  getAssignmentsByDepartment(department: string, semester: number): Promise<Assignment[]>;\n  createAssignment(assignment: InsertAssignment): Promise<Assignment>;\n  \n  // Notification operations\n  getUserNotifications(userId: string): Promise<Notification[]>;\n  createNotification(notification: InsertNotification): Promise<Notification>;\n  markNotificationAsRead(id: string): Promise<void>;\n  \n  // Contact submissions\n  createContactSubmission(submission: InsertContactSubmission): Promise<ContactSubmission>;\n  getAllContactSubmissions(): Promise<ContactSubmission[]>;\n}\n\nexport class PostgresStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(insertUser).returning();\n    return user;\n  }\n\n  // Student operations\n  async getStudent(userId: string): Promise<Student | undefined> {\n    const [student] = await db.select().from(students).where(eq(students.userId, userId));\n    return student;\n  }\n\n  async getStudentByRollNumber(rollNumber: string): Promise<Student | undefined> {\n    const [student] = await db.select().from(students).where(eq(students.rollNumber, rollNumber));\n    return student;\n  }\n\n  async createStudent(insertStudent: InsertStudent): Promise<Student> {\n    const [student] = await db.insert(students).values(insertStudent).returning();\n    return student;\n  }\n\n  async updateStudentAttendance(id: string, attendance: number): Promise<void> {\n    await db.update(students).set({ attendance }).where(eq(students.id, id));\n  }\n\n  // Faculty operations\n  async getFaculty(userId: string): Promise<Faculty | undefined> {\n    const [facultyMember] = await db.select().from(faculty).where(eq(faculty.userId, userId));\n    return facultyMember;\n  }\n\n  async getFacultyByEmployeeId(employeeId: string): Promise<Faculty | undefined> {\n    const [facultyMember] = await db.select().from(faculty).where(eq(faculty.employeeId, employeeId));\n    return facultyMember;\n  }\n\n  async createFaculty(insertFaculty: InsertFaculty): Promise<Faculty> {\n    const [facultyMember] = await db.insert(faculty).values(insertFaculty).returning();\n    return facultyMember;\n  }\n\n  // Alumni operations\n  async getAlumni(userId: string): Promise<Alumni | undefined> {\n    const [alumniMember] = await db.select().from(alumni).where(eq(alumni.userId, userId));\n    return alumniMember;\n  }\n\n  async createAlumni(insertAlumni: InsertAlumni): Promise<Alumni> {\n    const [alumniMember] = await db.insert(alumni).values(insertAlumni).returning();\n    return alumniMember;\n  }\n\n  // Department operations\n  async getAllDepartments(): Promise<Department[]> {\n    return db.select().from(departments);\n  }\n\n  async getDepartment(id: string): Promise<Department | undefined> {\n    const [department] = await db.select().from(departments).where(eq(departments.id, id));\n    return department;\n  }\n\n  async createDepartment(insertDepartment: InsertDepartment): Promise<Department> {\n    const [department] = await db.insert(departments).values([insertDepartment]).returning();\n    return department;\n  }\n\n  // Announcement operations\n  async getActiveAnnouncements(): Promise<Announcement[]> {\n    return db.select().from(announcements)\n      .where(eq(announcements.isActive, true))\n      .orderBy(desc(announcements.publishedAt))\n      .limit(10);\n  }\n\n  async createAnnouncement(insertAnnouncement: InsertAnnouncement): Promise<Announcement> {\n    const [announcement] = await db.insert(announcements).values(insertAnnouncement).returning();\n    return announcement;\n  }\n\n  // Event operations\n  async getActiveEvents(): Promise<Event[]> {\n    return db.select().from(events)\n      .where(eq(events.isActive, true))\n      .orderBy(events.eventDate);\n  }\n\n  async getEvent(id: string): Promise<Event | undefined> {\n    const [event] = await db.select().from(events).where(eq(events.id, id));\n    return event;\n  }\n\n  async createEvent(insertEvent: InsertEvent): Promise<Event> {\n    const [event] = await db.insert(events).values(insertEvent).returning();\n    return event;\n  }\n\n  async registerForEvent(registration: InsertEventRegistration): Promise<EventRegistration> {\n    const [eventRegistration] = await db.insert(eventRegistrations).values(registration).returning();\n    \n    // Increment current registrations count\n    await db.update(events)\n      .set({ currentRegistrations: sql`${events.currentRegistrations} + 1` })\n      .where(eq(events.id, registration.eventId));\n    \n    return eventRegistration;\n  }\n\n  // Placement operations\n  async getRecentPlacements(limit: number = 20): Promise<Placement[]> {\n    return db.select().from(placements)\n      .orderBy(desc(placements.placementDate))\n      .limit(limit);\n  }\n\n  async createPlacement(insertPlacement: InsertPlacement): Promise<Placement> {\n    const [placement] = await db.insert(placements).values(insertPlacement).returning();\n    return placement;\n  }\n\n  // Admission operations\n  async createAdmission(insertAdmission: InsertAdmission): Promise<Admission> {\n    const [admission] = await db.insert(admissions).values(insertAdmission).returning();\n    return admission;\n  }\n\n  async getAllAdmissions(): Promise<Admission[]> {\n    return db.select().from(admissions).orderBy(desc(admissions.applicationDate));\n  }\n\n  async updateAdmissionStatus(id: string, status: string, reviewedBy: string): Promise<void> {\n    await db.update(admissions)\n      .set({ status, reviewedBy, reviewedAt: new Date() })\n      .where(eq(admissions.id, id));\n  }\n\n  // Exam results operations\n  async getStudentResults(studentId: string): Promise<ExamResult[]> {\n    return db.select().from(examResults)\n      .where(eq(examResults.studentId, studentId))\n      .orderBy(desc(examResults.examDate));\n  }\n\n  async createExamResult(insertResult: InsertExamResult): Promise<ExamResult> {\n    const [result] = await db.insert(examResults).values(insertResult).returning();\n    return result;\n  }\n\n  // Assignment operations\n  async getAssignmentsByDepartment(department: string, semester: number): Promise<Assignment[]> {\n    return db.select().from(assignments)\n      .where(and(\n        eq(assignments.department, department),\n        eq(assignments.semester, semester)\n      ))\n      .orderBy(desc(assignments.dueDate));\n  }\n\n  async createAssignment(insertAssignment: InsertAssignment): Promise<Assignment> {\n    const [assignment] = await db.insert(assignments).values(insertAssignment).returning();\n    return assignment;\n  }\n\n  // Notification operations\n  async getUserNotifications(userId: string): Promise<Notification[]> {\n    return db.select().from(notifications)\n      .where(eq(notifications.userId, userId))\n      .orderBy(desc(notifications.createdAt))\n      .limit(20);\n  }\n\n  async createNotification(insertNotification: InsertNotification): Promise<Notification> {\n    const [notification] = await db.insert(notifications).values(insertNotification).returning();\n    return notification;\n  }\n\n  async markNotificationAsRead(id: string): Promise<void> {\n    await db.update(notifications).set({ isRead: true }).where(eq(notifications.id, id));\n  }\n\n  // Contact submissions\n  async createContactSubmission(insertSubmission: InsertContactSubmission): Promise<ContactSubmission> {\n    const [submission] = await db.insert(contactSubmissions).values(insertSubmission).returning();\n    return submission;\n  }\n\n  async getAllContactSubmissions(): Promise<ContactSubmission[]> {\n    return db.select().from(contactSubmissions).orderBy(desc(contactSubmissions.submittedAt));\n  }\n}\n\nexport const storage = new PostgresStorage();\n","size_bytes":11216},"client/src/pages/Departments.tsx":{"content":"import { Header } from \"@/components/Header\";\nimport { Footer } from \"@/components/Footer\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Cpu, Building2, FlaskConical, Zap, Atom, Cog } from \"lucide-react\";\n\n// todo: remove mock functionality\nconst departments = [\n  {\n    name: \"Computer Science & Engineering\",\n    icon: Cpu,\n    students: \"850+\",\n    faculty: \"45\",\n    programs: [\"B.Tech\", \"M.Tech\", \"PhD\"],\n    color: \"text-blue-600 dark:text-blue-400\",\n    bgColor: \"bg-blue-100 dark:bg-blue-900/30\",\n  },\n  {\n    name: \"Electronics & Communication\",\n    icon: Zap,\n    students: \"720+\",\n    faculty: \"38\",\n    programs: [\"B.Tech\", \"M.Tech\"],\n    color: \"text-emerald-600 dark:text-emerald-400\",\n    bgColor: \"bg-emerald-100 dark:bg-emerald-900/30\",\n  },\n  {\n    name: \"Mechanical Engineering\",\n    icon: Cog,\n    students: \"680+\",\n    faculty: \"42\",\n    programs: [\"B.Tech\", \"M.Tech\", \"PhD\"],\n    color: \"text-amber-600 dark:text-amber-400\",\n    bgColor: \"bg-amber-100 dark:bg-amber-900/30\",\n  },\n  {\n    name: \"Civil Engineering\",\n    icon: Building2,\n    students: \"520+\",\n    faculty: \"32\",\n    programs: [\"B.Tech\", \"M.Tech\"],\n    color: \"text-purple-600 dark:text-purple-400\",\n    bgColor: \"bg-purple-100 dark:bg-purple-900/30\",\n  },\n  {\n    name: \"Chemical Engineering\",\n    icon: FlaskConical,\n    students: \"380+\",\n    faculty: \"28\",\n    programs: [\"B.Tech\", \"M.Tech\"],\n    color: \"text-rose-600 dark:text-rose-400\",\n    bgColor: \"bg-rose-100 dark:bg-rose-900/30\",\n  },\n  {\n    name: \"Applied Sciences\",\n    icon: Atom,\n    students: \"450+\",\n    faculty: \"35\",\n    programs: [\"BSc\", \"MSc\", \"PhD\"],\n    color: \"text-indigo-600 dark:text-indigo-400\",\n    bgColor: \"bg-indigo-100 dark:bg-indigo-900/30\",\n  },\n];\n\nexport default function Departments() {\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header />\n      <main className=\"flex-1\">\n        <div className=\"bg-gradient-to-br from-primary/10 via-accent/5 to-background py-16 px-6\">\n          <div className=\"max-w-7xl mx-auto text-center\">\n            <h1 className=\"text-4xl md:text-5xl font-bold mb-4\">Our Departments</h1>\n            <p className=\"text-lg text-muted-foreground max-w-3xl mx-auto\">\n              JITS offers comprehensive programs across multiple engineering and science disciplines with \n              state-of-the-art facilities and experienced faculty.\n            </p>\n          </div>\n        </div>\n\n        <div className=\"px-6 py-16\">\n          <div className=\"max-w-7xl mx-auto\">\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {departments.map((dept, index) => (\n                <Card key={index} className=\"p-6 hover-elevate active-elevate-2 transition-all\" data-testid={`card-department-${index}`}>\n                  <div className={`${dept.bgColor} ${dept.color} p-4 rounded-lg inline-flex mb-4`}>\n                    <dept.icon className=\"h-8 w-8\" />\n                  </div>\n                  <h3 className=\"text-xl font-semibold mb-3\">{dept.name}</h3>\n                  <div className=\"space-y-2 text-sm text-muted-foreground mb-4\">\n                    <div className=\"flex justify-between\">\n                      <span>Students:</span>\n                      <span className=\"font-medium text-foreground\">{dept.students}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Faculty:</span>\n                      <span className=\"font-medium text-foreground\">{dept.faculty}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Programs:</span>\n                      <span className=\"font-medium text-foreground\">{dept.programs.join(\", \")}</span>\n                    </div>\n                  </div>\n                  <Button variant=\"outline\" className=\"w-full\" data-testid={`button-view-department-${index}`}>\n                    View Details\n                  </Button>\n                </Card>\n              ))}\n            </div>\n          </div>\n        </div>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":4165},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/examples/EventsPreview.tsx":{"content":"import { EventsPreview } from \"../EventsPreview\";\n\nexport default function EventsPreviewExample() {\n  return <EventsPreview />;\n}\n","size_bytes":130},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/components/AnnouncementsCarousel.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Calendar, AlertCircle, Trophy, BookOpen } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\nconst announcements = [\n  {\n    id: 1,\n    category: \"Admissions\",\n    title: \"MBA Admissions 2026 - Apply Now\",\n    date: \"2026-01-15\",\n    icon: BookOpen,\n    color: \"bg-blue-100 text-blue-700 dark:bg-blue-900/30 dark:text-blue-400\",\n    href: \"/admissions/apply\",\n  },\n  {\n    id: 2,\n    category: \"Examinations\",\n    title: \"Semester End Exams Timetable Released\",\n    date: \"2026-01-12\",\n    icon: AlertCircle,\n    color: \"bg-amber-100 text-amber-700 dark:bg-amber-900/30 dark:text-amber-400\",\n    href: \"/examinations/timetable\",\n  },\n  {\n    id: 3,\n    category: \"Achievements\",\n    title: \"Students Win National Hackathon 2026\",\n    date: \"2026-01-10\",\n    icon: Trophy,\n    color: \"bg-emerald-100 text-emerald-700 dark:bg-emerald-900/30 dark:text-emerald-400\",\n    href: \"/about/achievements\",\n  },\n  {\n    id: 4,\n    category: \"Events\",\n    title: \"Tech Fest 2026 - Register Now\",\n    date: \"2026-01-08\",\n    icon: Calendar,\n    color: \"bg-purple-100 text-purple-700 dark:bg-purple-900/30 dark:text-purple-400\",\n    href: \"/events\",\n  },\n];\n\nexport function AnnouncementsCarousel() {\n  const [current, setCurrent] = useState(0);\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setCurrent((prev) => (prev + 1) % announcements.length);\n    }, 5000);\n    return () => clearInterval(timer);\n  }, []);\n\n  return (\n    <section className=\"py-16 px-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-3xl md:text-4xl font-bold mb-4\">Latest Announcements</h2>\n          <p className=\"text-muted-foreground text-lg\">Stay updated with important notices and events</p>\n        </div>\n\n        <div className=\"relative overflow-hidden\">\n          <div className=\"flex transition-transform duration-500 ease-in-out\" style={{ transform: `translateX(-${current * 100}%)` }}>\n            {announcements.map((announcement) => (\n              <div key={announcement.id} className=\"w-full flex-shrink-0 px-2\">\n                <Card \n                  className=\"p-8 hover-elevate active-elevate-2 transition-all cursor-pointer\"\n                  onClick={() => setLocation(announcement.href)}\n                  data-testid={`link-announcement-${announcement.id}`}\n                >\n                  <div className=\"flex items-start gap-6\">\n                    <div className={`${announcement.color} p-4 rounded-lg`}>\n                      <announcement.icon className=\"h-8 w-8\" />\n                    </div>\n                    <div className=\"flex-1\">\n                      <Badge className=\"mb-3\" variant=\"secondary\">{announcement.category}</Badge>\n                      <h3 className=\"text-2xl font-semibold mb-3\">{announcement.title}</h3>\n                      <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                        <Calendar className=\"h-4 w-4\" />\n                        <span>{new Date(announcement.date).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}</span>\n                      </div>\n                    </div>\n                  </div>\n                </Card>\n              </div>\n            ))}\n          </div>\n\n          <div className=\"flex justify-center gap-2 mt-6\">\n            {announcements.map((_, index) => (\n              <button\n                key={index}\n                className={`h-2 rounded-full transition-all ${\n                  index === current ? \"w-8 bg-primary\" : \"w-2 bg-muted\"\n                }`}\n                onClick={() => setCurrent(index)}\n                data-testid={`button-announcement-indicator-${index}`}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":3999},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/examples/AboutSection.tsx":{"content":"import { AboutSection } from \"../AboutSection\";\n\nexport default function AboutSectionExample() {\n  return <AboutSection />;\n}\n","size_bytes":126},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/Header.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Menu, X, Search } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { ThemeToggle } from \"./ThemeToggle\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  NavigationMenu,\n  NavigationMenuContent,\n  NavigationMenuItem,\n  NavigationMenuLink,\n  NavigationMenuList,\n  NavigationMenuTrigger,\n} from \"@/components/ui/navigation-menu\";\n\nexport function Header() {\n  const [, setLocation] = useLocation();\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n  const [searchOpen, setSearchOpen] = useState(false);\n\n  const megaMenuItems = [\n    {\n      title: \"About Us\",\n      items: [\n        { name: \"Vision & Mission\", href: \"/about/vision\" },\n        { name: \"Governing Body\", href: \"/about/governing-body\" },\n        { name: \"Accreditation\", href: \"/about/accreditation\" },\n      ],\n    },\n    {\n      title: \"Academics\",\n      items: [\n        { name: \"Undergraduate Programs\", href: \"/academics/undergraduate\" },\n        { name: \"Postgraduate Programs\", href: \"/academics/postgraduate\" },\n        { name: \"Departments\", href: \"/academics/departments\" },\n        { name: \"Syllabus\", href: \"/academics/syllabus\" },\n      ],\n    },\n    {\n      title: \"Admissions\",\n      items: [\n        { name: \"Apply Online\", href: \"/admissions/apply\" },\n        { name: \"Eligibility\", href: \"/admissions/eligibility\" },\n        { name: \"Fees\", href: \"/admissions/fees\" },\n        { name: \"Admission Tracker\", href: \"/admissions/tracker\" },\n      ],\n    },\n    {\n      title: \"Examinations\",\n      items: [\n        { name: \"Results\", href: \"/examinations/results\" },\n        { name: \"Timetable\", href: \"/examinations/timetable\" },\n        { name: \"Hall Tickets\", href: \"/examinations/hall-tickets\" },\n      ],\n    },\n    {\n      title: \"Placements\",\n      items: [\n        { name: \"Placement Records\", href: \"/placements/records\" },\n        { name: \"Companies\", href: \"/placements/companies\" },\n        { name: \"Testimonials\", href: \"/placements/testimonials\" },\n      ],\n    },\n  ];\n\n  return (\n    <header className=\"sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur\">\n      <div className=\"flex h-16 items-center justify-between px-6 max-w-7xl mx-auto\">\n        <div className=\"flex items-center gap-8\">\n          <button \n            onClick={() => setLocation(\"/\")}\n            className=\"flex items-center gap-3 hover-elevate active-elevate-2 rounded-md px-2 py-1\" \n            data-testid=\"link-home\"\n          >\n            <div className=\"h-10 w-10 rounded-md bg-primary flex items-center justify-center\">\n              <span className=\"text-primary-foreground font-bold text-lg\">J</span>\n            </div>\n            <div className=\"hidden md:block\">\n              <div className=\"font-heading font-bold text-lg leading-none\">JITS</div>\n              <div className=\"text-xs text-muted-foreground\">Excellence in Education</div>\n            </div>\n          </button>\n\n          <nav className=\"hidden lg:flex items-center gap-1\">\n            <NavigationMenu>\n              <NavigationMenuList>\n                {megaMenuItems.map((menu) => (\n                  <NavigationMenuItem key={menu.title}>\n                    <NavigationMenuTrigger data-testid={`button-menu-${menu.title.toLowerCase().replace(/\\s+/g, '-')}`}>\n                      {menu.title}\n                    </NavigationMenuTrigger>\n                    <NavigationMenuContent>\n                      <ul className=\"grid w-[200px] gap-1 p-2\">\n                        {menu.items.map((item) => (\n                          <li key={item.name}>\n                            <NavigationMenuLink\n                              className=\"block select-none rounded-md p-3 leading-none no-underline outline-none transition-colors hover-elevate active-elevate-2 cursor-pointer\"\n                              onClick={() => setLocation(item.href)}\n                              data-testid={`link-${item.name.toLowerCase().replace(/\\s+/g, '-')}`}\n                            >\n                              <div className=\"text-sm font-medium leading-none\">{item.name}</div>\n                            </NavigationMenuLink>\n                          </li>\n                        ))}\n                      </ul>\n                    </NavigationMenuContent>\n                  </NavigationMenuItem>\n                ))}\n              </NavigationMenuList>\n            </NavigationMenu>\n          </nav>\n        </div>\n\n        <div className=\"flex items-center gap-2\">\n          {searchOpen ? (\n            <div className=\"flex items-center gap-2 animate-in fade-in slide-in-from-right-2 duration-200\">\n              <Input\n                type=\"search\"\n                placeholder=\"Search...\"\n                className=\"w-64\"\n                autoFocus\n                data-testid=\"input-search\"\n              />\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={() => setSearchOpen(false)}\n                data-testid=\"button-close-search\"\n              >\n                <X className=\"h-5 w-5\" />\n              </Button>\n            </div>\n          ) : (\n            <>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={() => setSearchOpen(true)}\n                className=\"hidden md:flex\"\n                data-testid=\"button-open-search\"\n              >\n                <Search className=\"h-5 w-5\" />\n              </Button>\n              <ThemeToggle />\n              <Button variant=\"default\" size=\"sm\" className=\"hidden md:flex\" onClick={() => setLocation(\"/student/login\")} data-testid=\"button-student-login\">\n                Student Login\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={() => setMobileMenuOpen(!mobileMenuOpen)}\n                className=\"lg:hidden\"\n                data-testid=\"button-mobile-menu\"\n              >\n                {mobileMenuOpen ? <X className=\"h-6 w-6\" /> : <Menu className=\"h-6 w-6\" />}\n              </Button>\n            </>\n          )}\n        </div>\n      </div>\n\n      {mobileMenuOpen && (\n        <div className=\"lg:hidden border-t bg-background animate-in slide-in-from-top-2 duration-200\">\n          <div className=\"px-6 py-4 space-y-4\">\n            {megaMenuItems.map((menu) => (\n              <div key={menu.title}>\n                <div className=\"font-semibold mb-2\">{menu.title}</div>\n                <div className=\"space-y-1 ml-4\">\n                  {menu.items.map((item) => (\n                    <button\n                      key={item.name}\n                      onClick={() => {\n                        setLocation(item.href);\n                        setMobileMenuOpen(false);\n                      }}\n                      className=\"block w-full text-left py-2 text-sm text-muted-foreground hover:text-foreground transition-colors\"\n                      data-testid={`link-mobile-${item.name.toLowerCase().replace(/\\s+/g, '-')}`}\n                    >\n                      {item.name}\n                    </button>\n                  ))}\n                </div>\n              </div>\n            ))}\n            <Button variant=\"default\" className=\"w-full\" onClick={() => setLocation(\"/student/login\")} data-testid=\"button-mobile-student-login\">\n              Student Login\n            </Button>\n          </div>\n        </div>\n      )}\n    </header>\n  );\n}\n","size_bytes":7507},"client/src/pages/StudentLogin.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Header } from \"@/components/Header\";\nimport { Footer } from \"@/components/Footer\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { GraduationCap } from \"lucide-react\";\n\nexport default function StudentLogin() {\n  const [, setLocation] = useLocation();\n  const [credentials, setCredentials] = useState({ username: \"\", password: \"\" });\n\n  const handleLogin = (e: React.FormEvent) => {\n    e.preventDefault();\n    console.log(\"Student login attempted:\", credentials);\n    // todo: remove mock functionality\n    setLocation(\"/student/dashboard\");\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header />\n      <main className=\"flex-1 flex items-center justify-center px-6 py-12 bg-muted/30\">\n        <Card className=\"w-full max-w-md p-8\">\n          <div className=\"flex justify-center mb-6\">\n            <div className=\"h-16 w-16 rounded-full bg-primary flex items-center justify-center\">\n              <GraduationCap className=\"h-8 w-8 text-primary-foreground\" />\n            </div>\n          </div>\n          <h1 className=\"text-2xl font-bold text-center mb-2\">Student Portal</h1>\n          <p className=\"text-center text-muted-foreground mb-8\">Sign in to access your dashboard</p>\n          \n          <form onSubmit={handleLogin} className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"username\">Student ID / Roll Number</Label>\n              <Input\n                id=\"username\"\n                type=\"text\"\n                placeholder=\"Enter your student ID\"\n                value={credentials.username}\n                onChange={(e) => setCredentials({ ...credentials, username: e.target.value })}\n                data-testid=\"input-student-username\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"password\">Password</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                placeholder=\"Enter your password\"\n                value={credentials.password}\n                onChange={(e) => setCredentials({ ...credentials, password: e.target.value })}\n                data-testid=\"input-student-password\"\n              />\n            </div>\n            <Button type=\"submit\" className=\"w-full\" data-testid=\"button-student-login-submit\">\n              Sign In\n            </Button>\n          </form>\n          \n          <div className=\"mt-6 text-center space-y-2\">\n            <button className=\"text-sm text-primary hover:underline\" data-testid=\"link-forgot-password\">\n              Forgot Password?\n            </button>\n            <div className=\"flex gap-4 justify-center text-sm\">\n              <button onClick={() => setLocation(\"/faculty/login\")} className=\"text-muted-foreground hover:text-foreground\" data-testid=\"link-faculty-login\">\n                Faculty Login\n              </button>\n              <button onClick={() => setLocation(\"/alumni/login\")} className=\"text-muted-foreground hover:text-foreground\" data-testid=\"link-alumni-login\">\n                Alumni Login\n              </button>\n            </div>\n          </div>\n        </Card>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":3364},"client/src/components/ThemeProvider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"light\" | \"dark\";\n\ntype ThemeContextType = {\n  theme: Theme;\n  toggleTheme: () => void;\n};\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    const stored = localStorage.getItem(\"theme\");\n    return (stored as Theme) || \"light\";\n  });\n\n  useEffect(() => {\n    const root = document.documentElement;\n    if (theme === \"dark\") {\n      root.classList.add(\"dark\");\n    } else {\n      root.classList.remove(\"dark\");\n    }\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme((prev) => (prev === \"light\" ? \"dark\" : \"light\"));\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error(\"useTheme must be used within ThemeProvider\");\n  }\n  return context;\n}\n","size_bytes":1127},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/ThemeProvider\";\nimport Home from \"@/pages/Home\";\nimport StudentLogin from \"@/pages/StudentLogin\";\nimport StudentDashboard from \"@/pages/StudentDashboard\";\nimport FacultyLogin from \"@/pages/FacultyLogin\";\nimport FacultyDashboard from \"@/pages/FacultyDashboard\";\nimport AlumniLogin from \"@/pages/AlumniLogin\";\nimport AlumniDashboard from \"@/pages/AlumniDashboard\";\nimport Departments from \"@/pages/Departments\";\nimport Placements from \"@/pages/Placements\";\nimport Admissions from \"@/pages/Admissions\";\nimport Contact from \"@/pages/Contact\";\nimport Events from \"@/pages/Events\";\nimport Results from \"@/pages/Results\";\nimport AboutVision from \"@/pages/AboutVision\";\nimport GoverningBody from \"@/pages/GoverningBody\";\nimport Accreditation from \"@/pages/Accreditation\";\nimport UndergraduatePrograms from \"@/pages/UndergraduatePrograms\";\nimport PostgraduatePrograms from \"@/pages/PostgraduatePrograms\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      \n      {/* Student routes */}\n      <Route path=\"/student/login\" component={StudentLogin} />\n      <Route path=\"/student/dashboard\" component={StudentDashboard} />\n      \n      {/* Faculty routes */}\n      <Route path=\"/faculty/login\" component={FacultyLogin} />\n      <Route path=\"/faculty/dashboard\" component={FacultyDashboard} />\n      \n      {/* Alumni routes */}\n      <Route path=\"/alumni/login\" component={AlumniLogin} />\n      <Route path=\"/alumni/dashboard\" component={AlumniDashboard} />\n      \n      {/* Public pages */}\n      <Route path=\"/about/vision\" component={AboutVision} />\n      <Route path=\"/about/governing-body\" component={GoverningBody} />\n      <Route path=\"/about/accreditation\" component={Accreditation} />\n      <Route path=\"/academics/departments\" component={Departments} />\n      <Route path=\"/academics/undergraduate\" component={UndergraduatePrograms} />\n      <Route path=\"/academics/postgraduate\" component={PostgraduatePrograms} />\n      <Route path=\"/placements/records\" component={Placements} />\n      <Route path=\"/placements/companies\" component={Placements} />\n      <Route path=\"/placements/testimonials\" component={Placements} />\n      <Route path=\"/admissions/apply\" component={Admissions} />\n      <Route path=\"/admissions/eligibility\" component={Admissions} />\n      <Route path=\"/admissions/fees\" component={Admissions} />\n      <Route path=\"/contact\" component={Contact} />\n      <Route path=\"/events\" component={Events} />\n      <Route path=\"/examinations/results\" component={Results} />\n      \n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nexport default function App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n","size_bytes":3202},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/examples/QuickLinks.tsx":{"content":"import { QuickLinks } from \"../QuickLinks\";\n\nexport default function QuickLinksExample() {\n  return <QuickLinks />;\n}\n","size_bytes":118},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 98%;\n\n  --foreground: 210 20% 15%;\n\n  --border: 210 12% 88%;\n\n  --card: 0 0% 100%;\n\n  --card-foreground: 210 20% 15%;\n\n  --card-border: 210 10% 92%;\n\n  --sidebar: 210 8% 96%;\n\n  --sidebar-foreground: 210 20% 15%;\n\n  --sidebar-border: 210 10% 89%;\n\n  --sidebar-primary: 210 80% 45%;\n\n  --sidebar-primary-foreground: 210 80% 98%;\n\n  --sidebar-accent: 210 15% 92%;\n\n  --sidebar-accent-foreground: 210 20% 20%;\n\n  --sidebar-ring: 210 80% 45%;\n\n  --popover: 0 0% 99%;\n\n  --popover-foreground: 210 20% 15%;\n\n  --popover-border: 210 10% 90%;\n\n  --primary: 210 80% 45%;\n\n  --primary-foreground: 210 80% 98%;\n\n  --secondary: 210 12% 94%;\n\n  --secondary-foreground: 210 20% 18%;\n\n  --muted: 210 15% 95%;\n\n  --muted-foreground: 210 15% 35%;\n\n  --accent: 165 65% 45%;\n\n  --accent-foreground: 165 65% 98%;\n\n  --destructive: 0 70% 50%;\n\n  --destructive-foreground: 0 70% 98%;\n\n  --input: 210 15% 75%;\n  --ring: 210 80% 45%;\n  --chart-1: 210 80% 42%;\n  --chart-2: 165 65% 45%;\n  --chart-3: 35 90% 48%;\n  --chart-4: 280 65% 50%;\n  --chart-5: 15 80% 55%;\n\n  --font-sans: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'JetBrains Mono', Menlo, monospace;\n  --font-heading: 'Plus Jakarta Sans', -apple-system, BlinkMacSystemFont, sans-serif;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(210 15% 10% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(210 15% 10% / 0.08);\n  --shadow-sm: 0px 2px 4px -1px hsl(210 15% 10% / 0.06), 0px 1px 2px -1px hsl(210 15% 10% / 0.06);\n  --shadow: 0px 4px 6px -1px hsl(210 15% 10% / 0.08), 0px 2px 4px -2px hsl(210 15% 10% / 0.08);\n  --shadow-md: 0px 6px 16px -4px hsl(210 15% 10% / 0.10), 0px 4px 6px -2px hsl(210 15% 10% / 0.05);\n  --shadow-lg: 0px 10px 24px -6px hsl(210 15% 10% / 0.12), 0px 8px 16px -4px hsl(210 15% 10% / 0.08);\n  --shadow-xl: 0px 20px 40px -8px hsl(210 15% 10% / 0.15), 0px 12px 24px -6px hsl(210 15% 10% / 0.10);\n  --shadow-2xl: 0px 32px 64px -12px hsl(210 15% 10% / 0.20);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 220 20% 10%;\n\n  --foreground: 210 15% 88%;\n\n  --border: 210 12% 20%;\n\n  --card: 220 18% 14%;\n\n  --card-foreground: 210 15% 88%;\n\n  --card-border: 210 15% 18%;\n\n  --sidebar: 220 18% 16%;\n\n  --sidebar-foreground: 210 15% 88%;\n\n  --sidebar-border: 210 15% 20%;\n\n  --sidebar-primary: 210 75% 55%;\n\n  --sidebar-primary-foreground: 210 75% 98%;\n\n  --sidebar-accent: 210 15% 20%;\n\n  --sidebar-accent-foreground: 210 15% 85%;\n\n  --sidebar-ring: 210 75% 55%;\n\n  --popover: 220 18% 15%;\n\n  --popover-foreground: 210 15% 88%;\n\n  --popover-border: 210 15% 19%;\n\n  --primary: 210 75% 55%;\n\n  --primary-foreground: 210 75% 98%;\n\n  --secondary: 210 12% 22%;\n\n  --secondary-foreground: 210 15% 88%;\n\n  --muted: 210 15% 18%;\n\n  --muted-foreground: 210 15% 75%;\n\n  --accent: 165 55% 50%;\n\n  --accent-foreground: 165 55% 98%;\n\n  --destructive: 0 70% 50%;\n\n  --destructive-foreground: 0 70% 98%;\n\n  --input: 210 15% 30%;\n  --ring: 210 75% 55%;\n  --chart-1: 210 75% 60%;\n  --chart-2: 165 60% 55%;\n  --chart-3: 35 90% 60%;\n  --chart-4: 280 60% 60%;\n  --chart-5: 15 80% 65%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(220 30% 5% / 0.40);\n  --shadow-xs: 0px 1px 3px 0px hsl(220 30% 5% / 0.50);\n  --shadow-sm: 0px 2px 4px -1px hsl(220 30% 5% / 0.45), 0px 1px 2px -1px hsl(220 30% 5% / 0.45);\n  --shadow: 0px 4px 6px -1px hsl(220 30% 5% / 0.50), 0px 2px 4px -2px hsl(220 30% 5% / 0.50);\n  --shadow-md: 0px 6px 16px -4px hsl(220 30% 5% / 0.55), 0px 4px 6px -2px hsl(220 30% 5% / 0.40);\n  --shadow-lg: 0px 10px 24px -6px hsl(220 30% 5% / 0.60), 0px 8px 16px -4px hsl(220 30% 5% / 0.50);\n  --shadow-xl: 0px 20px 40px -8px hsl(220 30% 5% / 0.70), 0px 12px 24px -6px hsl(220 30% 5% / 0.60);\n  --shadow-2xl: 0px 32px 64px -12px hsl(220 30% 5% / 0.80);\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    font-family: var(--font-heading);\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":11371},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { \n  insertStudentSchema, insertAdmissionSchema, insertEventRegistrationSchema, \n  insertContactSubmissionSchema\n} from \"@shared/schema\";\nimport rateLimit from \"express-rate-limit\";\nimport slowDown from \"express-slow-down\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Rate limiting for login attempts\n  const loginLimiter = rateLimit({\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    max: 5, // limit each IP to 5 login requests per windowMs\n    message: \"Too many login attempts, please try again later.\",\n    standardHeaders: true,\n    legacyHeaders: false,\n  });\n\n  // General API rate limiting\n  const apiLimiter = rateLimit({\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    max: 100, // limit each IP to 100 requests per windowMs\n    standardHeaders: true,\n    legacyHeaders: false,\n  });\n\n  // Slow down repeated requests\n  const speedLimiter = slowDown({\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    delayAfter: 50, // allow 50 requests per 15 minutes, then...\n    delayMs: () => 500, // begin adding 500ms of delay per request above 50\n  });\n\n  // Apply rate limiting to all API routes\n  app.use('/api/', apiLimiter);\n  app.use('/api/', speedLimiter);\n\n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      // Get role-specific data\n      let roleData = null;\n      if (user.role === 'student') {\n        roleData = await storage.getStudent(userId);\n      } else if (user.role === 'faculty') {\n        roleData = await storage.getFaculty(userId);\n      } else if (user.role === 'alumni') {\n        roleData = await storage.getAlumni(userId);\n      }\n      \n      res.json({ ...user, roleData });\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Public routes\n\n  // Get all departments\n  app.get('/api/departments', async (req, res) => {\n    try {\n      const departments = await storage.getAllDepartments();\n      res.json(departments);\n    } catch (error) {\n      console.error(\"Error fetching departments:\", error);\n      res.status(500).json({ message: \"Failed to fetch departments\" });\n    }\n  });\n\n  // Get active announcements\n  app.get('/api/announcements', async (req, res) => {\n    try {\n      const announcements = await storage.getActiveAnnouncements();\n      res.json(announcements);\n    } catch (error) {\n      console.error(\"Error fetching announcements:\", error);\n      res.status(500).json({ message: \"Failed to fetch announcements\" });\n    }\n  });\n\n  // Get active events\n  app.get('/api/events', async (req, res) => {\n    try {\n      const events = await storage.getActiveEvents();\n      res.json(events);\n    } catch (error) {\n      console.error(\"Error fetching events:\", error);\n      res.status(500).json({ message: \"Failed to fetch events\" });\n    }\n  });\n\n  // Get recent placements\n  app.get('/api/placements', async (req, res) => {\n    try {\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 20;\n      const placements = await storage.getRecentPlacements(limit);\n      res.json(placements);\n    } catch (error) {\n      console.error(\"Error fetching placements:\", error);\n      res.status(500).json({ message: \"Failed to fetch placements\" });\n    }\n  });\n\n  // Submit admission application\n  app.post('/api/admissions', async (req, res) => {\n    try {\n      const validatedData = insertAdmissionSchema.parse(req.body);\n      const admission = await storage.createAdmission(validatedData);\n      res.status(201).json(admission);\n    } catch (error: any) {\n      console.error(\"Error creating admission:\", error);\n      res.status(400).json({ message: error.message || \"Failed to create admission\" });\n    }\n  });\n\n  // Submit contact form\n  app.post('/api/contact', async (req, res) => {\n    try {\n      const validatedData = insertContactSubmissionSchema.parse(req.body);\n      const submission = await storage.createContactSubmission(validatedData);\n      res.status(201).json(submission);\n    } catch (error: any) {\n      console.error(\"Error creating contact submission:\", error);\n      res.status(400).json({ message: error.message || \"Failed to submit contact form\" });\n    }\n  });\n\n  // Protected student routes\n  \n  // Get student dashboard data\n  app.get('/api/student/dashboard', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user || user.role !== 'student') {\n        return res.status(403).json({ message: \"Forbidden: Student access only\" });\n      }\n      \n      const student = await storage.getStudent(userId);\n      if (!student) {\n        return res.status(404).json({ message: \"Student profile not found\" });\n      }\n      \n      const notifications = await storage.getUserNotifications(userId);\n      const results = await storage.getStudentResults(student.id);\n      const assignments = await storage.getAssignmentsByDepartment(student.department, student.semester);\n      \n      res.json({\n        student,\n        notifications,\n        results,\n        assignments,\n      });\n    } catch (error) {\n      console.error(\"Error fetching student dashboard:\", error);\n      res.status(500).json({ message: \"Failed to fetch dashboard data\" });\n    }\n  });\n\n  // Get student results\n  app.get('/api/student/results', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const student = await storage.getStudent(userId);\n      \n      if (!student) {\n        return res.status(404).json({ message: \"Student profile not found\" });\n      }\n      \n      const results = await storage.getStudentResults(student.id);\n      res.json(results);\n    } catch (error) {\n      console.error(\"Error fetching student results:\", error);\n      res.status(500).json({ message: \"Failed to fetch results\" });\n    }\n  });\n\n  // Get student notifications\n  app.get('/api/student/notifications', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const notifications = await storage.getUserNotifications(userId);\n      res.json(notifications);\n    } catch (error) {\n      console.error(\"Error fetching notifications:\", error);\n      res.status(500).json({ message: \"Failed to fetch notifications\" });\n    }\n  });\n\n  // Mark notification as read\n  app.patch('/api/notifications/:id/read', isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.markNotificationAsRead(id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error marking notification as read:\", error);\n      res.status(500).json({ message: \"Failed to update notification\" });\n    }\n  });\n\n  // Register for event\n  app.post('/api/events/register', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { eventId } = req.body;\n      \n      if (!eventId) {\n        return res.status(400).json({ message: \"Event ID is required\" });\n      }\n      \n      const event = await storage.getEvent(eventId);\n      if (!event) {\n        return res.status(404).json({ message: \"Event not found\" });\n      }\n      \n      if (event.maxRegistrations && (event.currentRegistrations || 0) >= event.maxRegistrations) {\n        return res.status(400).json({ message: \"Event is full\" });\n      }\n      \n      const registration = await storage.registerForEvent({ eventId, userId });\n      res.status(201).json(registration);\n    } catch (error: any) {\n      console.error(\"Error registering for event:\", error);\n      res.status(400).json({ message: error.message || \"Failed to register for event\" });\n    }\n  });\n\n  // Protected faculty routes\n  \n  // Get faculty dashboard\n  app.get('/api/faculty/dashboard', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user || user.role !== 'faculty') {\n        return res.status(403).json({ message: \"Forbidden: Faculty access only\" });\n      }\n      \n      const faculty = await storage.getFaculty(userId);\n      if (!faculty) {\n        return res.status(404).json({ message: \"Faculty profile not found\" });\n      }\n      \n      res.json({ faculty });\n    } catch (error) {\n      console.error(\"Error fetching faculty dashboard:\", error);\n      res.status(500).json({ message: \"Failed to fetch dashboard data\" });\n    }\n  });\n\n  // Protected alumni routes\n  \n  // Get alumni dashboard\n  app.get('/api/alumni/dashboard', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user || user.role !== 'alumni') {\n        return res.status(403).json({ message: \"Forbidden: Alumni access only\" });\n      }\n      \n      const alumni = await storage.getAlumni(userId);\n      if (!alumni) {\n        return res.status(404).json({ message: \"Alumni profile not found\" });\n      }\n      \n      res.json({ alumni });\n    } catch (error) {\n      console.error(\"Error fetching alumni dashboard:\", error);\n      res.status(500).json({ message: \"Failed to fetch dashboard data\" });\n    }\n  });\n\n  // Protected admin routes\n  \n  // Get all admissions (admin only)\n  app.get('/api/admin/admissions', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ message: \"Forbidden: Admin access only\" });\n      }\n      \n      const admissions = await storage.getAllAdmissions();\n      res.json(admissions);\n    } catch (error) {\n      console.error(\"Error fetching admissions:\", error);\n      res.status(500).json({ message: \"Failed to fetch admissions\" });\n    }\n  });\n\n  // Update admission status (admin only)\n  app.patch('/api/admin/admissions/:id/status', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ message: \"Forbidden: Admin access only\" });\n      }\n      \n      const { id } = req.params;\n      const { status } = req.body;\n      \n      if (!status || !['pending', 'approved', 'rejected'].includes(status)) {\n        return res.status(400).json({ message: \"Invalid status\" });\n      }\n      \n      await storage.updateAdmissionStatus(id, status, userId);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error updating admission status:\", error);\n      res.status(500).json({ message: \"Failed to update admission status\" });\n    }\n  });\n\n  // Get all contact submissions (admin only)\n  app.get('/api/admin/contact-submissions', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ message: \"Forbidden: Admin access only\" });\n      }\n      \n      const submissions = await storage.getAllContactSubmissions();\n      res.json(submissions);\n    } catch (error) {\n      console.error(\"Error fetching contact submissions:\", error);\n      res.status(500).json({ message: \"Failed to fetch contact submissions\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":11988},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ThemeToggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useTheme } from \"./ThemeProvider\";\n\nexport function ThemeToggle() {\n  const { theme, toggleTheme } = useTheme();\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={toggleTheme}\n      data-testid=\"button-theme-toggle\"\n    >\n      {theme === \"light\" ? (\n        <Moon className=\"h-5 w-5\" />\n      ) : (\n        <Sun className=\"h-5 w-5\" />\n      )}\n    </Button>\n  );\n}\n","size_bytes":495},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/pages/Placements.tsx":{"content":"import { Header } from \"@/components/Header\";\nimport { Footer } from \"@/components/Footer\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { TrendingUp, Building2, Users, Award } from \"lucide-react\";\n\n// todo: remove mock functionality\nconst stats = [\n  { label: \"Placement Rate\", value: \"100%\", icon: TrendingUp, color: \"text-emerald-600 dark:text-emerald-400\" },\n  { label: \"Companies Visited\", value: \"150+\", icon: Building2, color: \"text-blue-600 dark:text-blue-400\" },\n  { label: \"Students Placed\", value: \"1200+\", icon: Users, color: \"text-purple-600 dark:text-purple-400\" },\n  { label: \"Highest Package\", value: \"₹45 LPA\", icon: Award, color: \"text-amber-600 dark:text-amber-400\" },\n];\n\nconst topRecruiters = [\n  \"Microsoft\", \"Google\", \"Amazon\", \"Infosys\", \"TCS\", \"Wipro\", \n  \"Cognizant\", \"Accenture\", \"IBM\", \"Oracle\", \"Adobe\", \"SAP\"\n];\n\nconst testimonials = [\n  {\n    name: \"Priya Sharma\",\n    company: \"Microsoft\",\n    package: \"₹38 LPA\",\n    text: \"JITS provided excellent training and placement support. The faculty guidance and industry exposure helped me secure my dream job.\",\n  },\n  {\n    name: \"Arjun Patel\",\n    company: \"Google\",\n    package: \"₹42 LPA\",\n    text: \"The placement cell worked tirelessly to bring top companies. The technical training sessions were invaluable for interview preparation.\",\n  },\n  {\n    name: \"Ananya Reddy\",\n    company: \"Amazon\",\n    package: \"₹35 LPA\",\n    text: \"From mock interviews to resume building, JITS placement team supported us at every step. Grateful for the opportunity!\",\n  },\n];\n\nexport default function Placements() {\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header />\n      <main className=\"flex-1\">\n        <div className=\"bg-gradient-to-br from-emerald-600 via-emerald-700 to-emerald-800 text-white py-20 px-6\">\n          <div className=\"max-w-7xl mx-auto text-center\">\n            <h1 className=\"text-4xl md:text-5xl font-bold mb-4\">Placements</h1>\n            <p className=\"text-xl text-white/90 max-w-3xl mx-auto\">\n              Proud legacy of 100% placement record with top companies recruiting our talented students\n            </p>\n          </div>\n        </div>\n\n        <div className=\"px-6 py-16 bg-muted/30\">\n          <div className=\"max-w-7xl mx-auto\">\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              {stats.map((stat, index) => (\n                <Card key={index} className=\"p-6 text-center\">\n                  <div className={`${stat.color} flex justify-center mb-3`}>\n                    <stat.icon className=\"h-10 w-10\" />\n                  </div>\n                  <div className=\"text-3xl font-bold mb-1\">{stat.value}</div>\n                  <div className=\"text-sm text-muted-foreground\">{stat.label}</div>\n                </Card>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"px-6 py-16\">\n          <div className=\"max-w-7xl mx-auto\">\n            <h2 className=\"text-3xl font-bold text-center mb-12\">Top Recruiters</h2>\n            <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\n              {topRecruiters.map((company, index) => (\n                <Card key={index} className=\"p-6 text-center hover-elevate transition-all\">\n                  <p className=\"font-semibold\">{company}</p>\n                </Card>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"px-6 py-16 bg-muted/30\">\n          <div className=\"max-w-7xl mx-auto\">\n            <h2 className=\"text-3xl font-bold text-center mb-4\">Student Testimonials</h2>\n            <p className=\"text-center text-muted-foreground mb-12 max-w-2xl mx-auto\">\n              Hear from our successful alumni about their placement journey\n            </p>\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {testimonials.map((testimonial, index) => (\n                <Card key={index} className=\"p-6\" data-testid={`card-testimonial-${index}`}>\n                  <div className=\"mb-4\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <h3 className=\"font-semibold text-lg\">{testimonial.name}</h3>\n                      <Badge>{testimonial.package}</Badge>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground\">{testimonial.company}</p>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground italic\">\"{testimonial.text}\"</p>\n                </Card>\n              ))}\n            </div>\n          </div>\n        </div>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":4693},"client/src/components/AboutSection.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Users, Building2, Trophy, TrendingUp } from \"lucide-react\";\n\nconst stats = [\n  { label: \"Students\", value: \"5000+\", icon: Users, color: \"text-blue-600 dark:text-blue-400\" },\n  { label: \"Departments\", value: \"12\", icon: Building2, color: \"text-emerald-600 dark:text-emerald-400\" },\n  { label: \"Placements\", value: \"100%\", icon: Trophy, color: \"text-amber-600 dark:text-amber-400\" },\n  { label: \"Companies\", value: \"150+\", icon: TrendingUp, color: \"text-purple-600 dark:text-purple-400\" },\n];\n\nexport function AboutSection() {\n  return (\n    <section className=\"py-20 px-6 bg-muted/30\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n          <div>\n            <h2 className=\"text-3xl md:text-4xl font-bold mb-6\">About JITS</h2>\n            <div className=\"space-y-4 text-muted-foreground\">\n              <div>\n                <h3 className=\"text-xl font-semibold text-foreground mb-2\">Our Vision</h3>\n                <p>\n                  To be a globally recognized center of excellence in technical education, research, and innovation, \n                  nurturing future leaders who contribute to society and industry.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-xl font-semibold text-foreground mb-2\">Our Mission</h3>\n                <p>\n                  To provide quality education with state-of-the-art infrastructure, experienced faculty, \n                  and industry partnerships that ensure holistic development and career success for our students.\n                </p>\n              </div>\n              <div>\n                <h3 className=\"text-xl font-semibold text-foreground mb-2\">Achievements</h3>\n                <p>\n                  NAAC A+ accredited institution with NBA accreditation for all programs. Ranked among \n                  the top engineering colleges with excellent placement records and research output.\n                </p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            {stats.map((stat) => (\n              <Card key={stat.label} className=\"p-6 text-center\">\n                <div className={`${stat.color} flex justify-center mb-3`}>\n                  <stat.icon className=\"h-10 w-10\" />\n                </div>\n                <div className=\"text-3xl font-bold mb-1\">{stat.value}</div>\n                <div className=\"text-sm text-muted-foreground\">{stat.label}</div>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":2658},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/EventsPreview.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Calendar, MapPin, Clock } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nconst events = [\n  {\n    id: 1,\n    title: \"Annual Tech Fest 2026\",\n    date: \"2026-02-15\",\n    time: \"9:00 AM - 6:00 PM\",\n    location: \"Main Auditorium\",\n    category: \"Cultural\",\n    bgGradient: \"from-blue-500 to-blue-600\",\n  },\n  {\n    id: 2,\n    title: \"Industry Expert Workshop\",\n    date: \"2026-02-20\",\n    time: \"2:00 PM - 5:00 PM\",\n    location: \"Seminar Hall A\",\n    category: \"Workshop\",\n    bgGradient: \"from-emerald-500 to-emerald-600\",\n  },\n  {\n    id: 3,\n    title: \"Career Guidance Seminar\",\n    date: \"2026-02-25\",\n    time: \"10:00 AM - 1:00 PM\",\n    location: \"Conference Room\",\n    category: \"Seminar\",\n    bgGradient: \"from-purple-500 to-purple-600\",\n  },\n];\n\nexport function EventsPreview() {\n  return (\n    <section className=\"py-16 px-6 bg-muted/30\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"flex items-center justify-between mb-12\">\n          <div>\n            <h2 className=\"text-3xl md:text-4xl font-bold mb-4\">Upcoming Events</h2>\n            <p className=\"text-muted-foreground text-lg\">Join us for workshops, seminars, and cultural activities</p>\n          </div>\n          <Button variant=\"outline\" asChild className=\"hidden md:flex\" data-testid=\"button-view-all-events\">\n            <Link href=\"/events\">View All Events</Link>\n          </Button>\n        </div>\n\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {events.map((event) => (\n            <Card key={event.id} className=\"overflow-hidden hover-elevate active-elevate-2 transition-all cursor-pointer\" data-testid={`card-event-${event.id}`}>\n              <div className={`h-32 bg-gradient-to-r ${event.bgGradient} relative`}>\n                <div className=\"absolute top-4 right-4 bg-white dark:bg-card text-foreground px-3 py-1 rounded-md text-sm font-semibold\">\n                  {event.category}\n                </div>\n              </div>\n              <div className=\"p-6\">\n                <h3 className=\"font-semibold text-xl mb-4\">{event.title}</h3>\n                <div className=\"space-y-2 text-sm text-muted-foreground mb-6\">\n                  <div className=\"flex items-center gap-2\">\n                    <Calendar className=\"h-4 w-4\" />\n                    <span>{new Date(event.date).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Clock className=\"h-4 w-4\" />\n                    <span>{event.time}</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <MapPin className=\"h-4 w-4\" />\n                    <span>{event.location}</span>\n                  </div>\n                </div>\n                <Button className=\"w-full\" variant=\"outline\" data-testid={`button-register-event-${event.id}`}>\n                  Register Now\n                </Button>\n              </div>\n            </Card>\n          ))}\n        </div>\n\n        <div className=\"mt-8 flex justify-center md:hidden\">\n          <Button variant=\"outline\" asChild data-testid=\"button-view-all-events-mobile\">\n            <Link href=\"/events\">View All Events</Link>\n          </Button>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":3440},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/examples/AnnouncementsCarousel.tsx":{"content":"import { AnnouncementsCarousel } from \"../AnnouncementsCarousel\";\n\nexport default function AnnouncementsCarouselExample() {\n  return <AnnouncementsCarousel />;\n}\n","size_bytes":162},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { User } from \"@shared/schema\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery<User>({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":307},"server/seed.ts":{"content":"import { db } from \"./db\";\nimport { \n  departments, \n  announcements, \n  events\n} from \"../shared/schema\";\n\nasync function seed() {\n  console.log(\"Seeding database...\");\n\n  // Seed departments\n  const deptData = [\n    {\n      name: \"Computer Science & Engineering\",\n      code: \"CSE\",\n      description: \"Leading-edge curriculum in software development, AI, and data science\",\n      programs: [\"B.Tech\", \"M.Tech\"],\n    },\n    {\n      name: \"Electronics & Communication\",\n      code: \"ECE\",\n      description: \"Innovative programs in VLSI, embedded systems, and communication technologies\",\n      programs: [\"B.Tech\", \"M.Tech\"],\n    },\n    {\n      name: \"Mechanical Engineering\",\n      code: \"ME\",\n      description: \"Industry-oriented programs in design, manufacturing, and automation\",\n      programs: [\"B.Tech\", \"M.Tech\"],\n    },\n    {\n      name: \"Civil Engineering\",\n      code: \"CE\",\n      description: \"Comprehensive training in structural design and construction management\",\n      programs: [\"B.Tech\"],\n    },\n    {\n      name: \"Chemical Engineering\",\n      code: \"CHE\",\n      description: \"Advanced programs in process engineering and sustainable technologies\",\n      programs: [\"B.Tech\", \"M.Tech\"],\n    },\n    {\n      name: \"Applied Sciences\",\n      code: \"AS\",\n      description: \"Strong foundation in physics, chemistry, and mathematics\",\n      programs: [\"BSc\", \"MSc\"],\n    },\n  ];\n\n  for (const dept of deptData) {\n    await db.insert(departments).values(dept).onConflictDoNothing();\n  }\n\n  // Seed announcements\n  const announcementData = [\n    {\n      title: \"Semester Exam Schedule Released\",\n      content: \"The examination schedule for the current semester has been published. Students can check the schedule on the student portal.\",\n      category: \"academic\" as const,\n      priority: \"high\" as const,\n      publishDate: new Date(),\n      expiryDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),\n    },\n    {\n      title: \"Annual Tech Fest Registration Open\",\n      content: \"Register now for TechVista 2026, our annual technical and cultural fest. Exciting prizes and competitions await!\",\n      category: \"event\" as const,\n      priority: \"medium\" as const,\n      publishDate: new Date(),\n      expiryDate: new Date(Date.now() + 45 * 24 * 60 * 60 * 1000),\n    },\n    {\n      title: \"Placement Drive - Tech Giants\",\n      content: \"Google, Microsoft, and Amazon will be visiting campus next month for recruitment. Eligible students should register immediately.\",\n      category: \"placement\" as const,\n      priority: \"high\" as const,\n      publishDate: new Date(),\n      expiryDate: new Date(Date.now() + 60 * 24 * 60 * 60 * 1000),\n    },\n    {\n      title: \"Library Extended Hours\",\n      content: \"During exam week, the library will remain open 24/7 for student convenience.\",\n      category: \"general\" as const,\n      priority: \"low\" as const,\n      publishDate: new Date(),\n      expiryDate: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000),\n    },\n  ];\n\n  for (const announcement of announcementData) {\n    await db.insert(announcements).values(announcement).onConflictDoNothing();\n  }\n\n  // Seed events\n  const eventData = [\n    {\n      title: \"AI & Machine Learning Workshop\",\n      description: \"Hands-on workshop covering the fundamentals of AI and ML with industry experts\",\n      category: \"workshop\" as const,\n      eventDate: new Date(Date.now() + 15 * 24 * 60 * 60 * 1000),\n      startTime: \"10:00 AM\",\n      endTime: \"04:00 PM\",\n      location: \"Seminar Hall A\",\n      maxRegistrations: 100,\n      currentRegistrations: 45,\n    },\n    {\n      title: \"Annual Cultural Fest - Rangmanch\",\n      description: \"Join us for three days of music, dance, drama, and cultural celebrations\",\n      category: \"cultural\" as const,\n      eventDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),\n      startTime: \"09:00 AM\",\n      endTime: \"08:00 PM\",\n      location: \"Main Auditorium\",\n      maxRegistrations: 500,\n      currentRegistrations: 320,\n    },\n    {\n      title: \"Industry Connect Seminar\",\n      description: \"CEOs and CTOs from leading companies share insights on industry trends\",\n      category: \"seminar\" as const,\n      eventDate: new Date(Date.now() + 20 * 24 * 60 * 60 * 1000),\n      startTime: \"02:00 PM\",\n      endTime: \"05:00 PM\",\n      location: \"Conference Hall\",\n      maxRegistrations: 200,\n      currentRegistrations: 150,\n    },\n    {\n      title: \"Inter-College Sports Meet\",\n      description: \"Annual sports competition featuring cricket, football, basketball, and athletics\",\n      category: \"sports\" as const,\n      eventDate: new Date(Date.now() + 40 * 24 * 60 * 60 * 1000),\n      startTime: \"08:00 AM\",\n      endTime: \"06:00 PM\",\n      location: \"Sports Complex\",\n      maxRegistrations: 300,\n      currentRegistrations: 180,\n    },\n  ];\n\n  for (const event of eventData) {\n    await db.insert(events).values(event).onConflictDoNothing();\n  }\n\n  console.log(\"Database seeded successfully!\");\n}\n\nseed().catch(console.error);\n","size_bytes":4988},"client/src/pages/AlumniLogin.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { Header } from \"@/components/Header\";\nimport { Footer } from \"@/components/Footer\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Users } from \"lucide-react\";\n\nexport default function AlumniLogin() {\n  const [, setLocation] = useLocation();\n\n  const handleLogin = () => {\n    // Redirect to Replit Auth\n    window.location.href = \"/api/login\";\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header />\n      <main className=\"flex-1 flex items-center justify-center px-6 py-12 bg-muted/30\">\n        <Card className=\"w-full max-w-md p-8\">\n          <div className=\"flex justify-center mb-6\">\n            <div className=\"h-16 w-16 rounded-full bg-purple-600 dark:bg-purple-500 flex items-center justify-center\">\n              <Users className=\"h-8 w-8 text-white\" />\n            </div>\n          </div>\n          <h1 className=\"text-2xl font-bold text-center mb-2\">Alumni Portal</h1>\n          <p className=\"text-center text-muted-foreground mb-8\">Sign in with your Replit account</p>\n          \n          <Button onClick={handleLogin} className=\"w-full\" data-testid=\"button-alumni-login-submit\">\n            Sign In with Replit\n          </Button>\n          \n          <div className=\"mt-6 text-center space-y-2\">\n            <div className=\"flex gap-4 justify-center text-sm\">\n              <button onClick={() => setLocation(\"/student/login\")} className=\"text-muted-foreground hover:text-foreground\" data-testid=\"link-student-login\">\n                Student Login\n              </button>\n              <button onClick={() => setLocation(\"/faculty/login\")} className=\"text-muted-foreground hover:text-foreground\" data-testid=\"link-faculty-login\">\n                Faculty Login\n              </button>\n            </div>\n          </div>\n        </Card>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":1929},"client/src/pages/AlumniDashboard.tsx":{"content":"import { useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Header } from \"@/components/Header\";\nimport { Footer } from \"@/components/Footer\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Calendar, DollarSign, Users, FileText } from \"lucide-react\";\n\nexport default function AlumniDashboard() {\n  const { user, isLoading: authLoading, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    if (!authLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n    }\n  }, [isAuthenticated, authLoading, toast]);\n\n  const { data: dashboardData } = useQuery({\n    queryKey: [\"/api/alumni/dashboard\"],\n    enabled: isAuthenticated && user?.role === 'alumni',\n  });\n\n  if (authLoading || !isAuthenticated) {\n    return <div className=\"min-h-screen flex items-center justify-center\">Loading...</div>;\n  }\n\n  if (user?.role !== 'alumni') {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <p>Access Denied: Alumni access only</p>\n      </div>\n    );\n  }\n\n  const alumni = dashboardData?.alumni;\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header />\n      <main className=\"flex-1 px-6 py-8 bg-muted/30\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"mb-8\">\n            <h1 className=\"text-3xl font-bold mb-2\">Welcome back, {alumni?.name || user.firstName || 'Alumni'}!</h1>\n            <p className=\"text-muted-foreground\">\n              {alumni?.course} • {alumni?.department} • Class of {alumni?.graduationYear}\n            </p>\n            {alumni?.currentCompany && (\n              <p className=\"text-muted-foreground\">\n                {alumni.currentPosition} at {alumni.currentCompany}\n              </p>\n            )}\n          </div>\n\n          <div className=\"grid lg:grid-cols-2 gap-6 mb-8\">\n            <Card className=\"p-6\">\n              <h2 className=\"text-xl font-semibold mb-6\">Upcoming Alumni Events</h2>\n              <div className=\"space-y-4\">\n                <div className=\"flex gap-3 pb-4 border-b\">\n                  <Calendar className=\"h-5 w-5 text-primary mt-1\" />\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-medium\">Annual Alumni Meet 2026</h3>\n                    <p className=\"text-sm text-muted-foreground\">March 15, 2026</p>\n                  </div>\n                  <Button size=\"sm\" variant=\"outline\" data-testid=\"button-register-alumni-meet\">Register</Button>\n                </div>\n                <div className=\"flex gap-3 pb-4 border-b\">\n                  <Calendar className=\"h-5 w-5 text-primary mt-1\" />\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-medium\">Industry Connect Workshop</h3>\n                    <p className=\"text-sm text-muted-foreground\">April 20, 2026</p>\n                  </div>\n                  <Button size=\"sm\" variant=\"outline\" data-testid=\"button-register-workshop\">Register</Button>\n                </div>\n                <div className=\"flex gap-3\">\n                  <Calendar className=\"h-5 w-5 text-primary mt-1\" />\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-medium\">Homecoming Day</h3>\n                    <p className=\"text-sm text-muted-foreground\">December 10, 2026</p>\n                  </div>\n                  <Button size=\"sm\" variant=\"outline\" data-testid=\"button-register-homecoming\">Register</Button>\n                </div>\n              </div>\n            </Card>\n\n            <Card className=\"p-6\">\n              <h2 className=\"text-xl font-semibold mb-6\">Quick Actions</h2>\n              <div className=\"grid gap-3\">\n                <Button variant=\"outline\" className=\"justify-start\" data-testid=\"button-update-profile\">\n                  <Users className=\"h-4 w-4 mr-2\" />\n                  Update Profile\n                </Button>\n                <Button variant=\"outline\" className=\"justify-start\" data-testid=\"button-view-directory\">\n                  <FileText className=\"h-4 w-4 mr-2\" />\n                  Alumni Directory\n                </Button>\n                <Button variant=\"outline\" className=\"justify-start\" data-testid=\"button-donate\">\n                  <DollarSign className=\"h-4 w-4 mr-2\" />\n                  Make a Donation\n                </Button>\n                <Button variant=\"outline\" className=\"justify-start\" data-testid=\"button-mentorship\">\n                  <Users className=\"h-4 w-4 mr-2\" />\n                  Mentorship Program\n                </Button>\n              </div>\n            </Card>\n          </div>\n\n          <Card className=\"p-6\">\n            <h2 className=\"text-xl font-semibold mb-6\">Latest Alumni News</h2>\n            <div className=\"space-y-4\">\n              <div className=\"flex gap-3 pb-4 border-b\">\n                <div className=\"h-2 w-2 rounded-full bg-primary mt-2 flex-shrink-0\" />\n                <div className=\"flex-1\">\n                  <p className=\"text-sm\">JITS alumni association raises ₹50 lakhs for scholarship fund</p>\n                  <p className=\"text-xs text-muted-foreground mt-1\">2 weeks ago</p>\n                </div>\n              </div>\n              <div className=\"flex gap-3 pb-4 border-b\">\n                <div className=\"h-2 w-2 rounded-full bg-primary mt-2 flex-shrink-0\" />\n                <div className=\"flex-1\">\n                  <p className=\"text-sm\">Alumni startup successfully exits with $10M valuation</p>\n                  <p className=\"text-xs text-muted-foreground mt-1\">1 month ago</p>\n                </div>\n              </div>\n              <div className=\"flex gap-3\">\n                <div className=\"h-2 w-2 rounded-full bg-primary mt-2 flex-shrink-0\" />\n                <div className=\"flex-1\">\n                  <p className=\"text-sm\">New mentorship program launched for current students</p>\n                  <p className=\"text-xs text-muted-foreground mt-1\">2 months ago</p>\n                </div>\n              </div>\n            </div>\n          </Card>\n        </div>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":6441},"client/src/pages/Events.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Header } from \"@/components/Header\";\nimport { Footer } from \"@/components/Footer\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Calendar, MapPin, Clock, Users } from \"lucide-react\";\n\nexport default function Events() {\n  const { isAuthenticated } = useAuth();\n  const { toast } = useToast();\n  const [selectedCategory, setSelectedCategory] = useState<string>(\"all\");\n\n  const { data: events = [] } = useQuery({\n    queryKey: [\"/api/events\"],\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (eventId: string) => {\n      await apiRequest(\"/api/events/register\", \"POST\", { eventId });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/events\"] });\n      toast({\n        title: \"Success\",\n        description: \"Successfully registered for the event!\",\n      });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to register for event\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const categories = [\"all\", \"cultural\", \"workshop\", \"seminar\", \"sports\"];\n  const filteredEvents = selectedCategory === \"all\" \n    ? events \n    : events.filter((e: any) => e.category.toLowerCase() === selectedCategory);\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header />\n      <main className=\"flex-1\">\n        <div className=\"bg-gradient-to-br from-primary/10 via-accent/5 to-background py-16 px-6\">\n          <div className=\"max-w-7xl mx-auto text-center\">\n            <h1 className=\"text-4xl md:text-5xl font-bold mb-4\">Events & Activities</h1>\n            <p className=\"text-lg text-muted-foreground max-w-3xl mx-auto\">\n              Discover and register for upcoming workshops, seminars, cultural events, and more\n            </p>\n          </div>\n        </div>\n\n        <div className=\"px-6 py-8\">\n          <div className=\"max-w-7xl mx-auto\">\n            <div className=\"flex flex-wrap gap-2 mb-8\">\n              {categories.map((category) => (\n                <Button\n                  key={category}\n                  variant={selectedCategory === category ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setSelectedCategory(category)}\n                  className=\"capitalize\"\n                  data-testid={`button-category-${category}`}\n                >\n                  {category}\n                </Button>\n              ))}\n            </div>\n\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {filteredEvents.map((event: any) => (\n                <Card key={event.id} className=\"overflow-hidden hover-elevate transition-all\" data-testid={`card-event-${event.id}`}>\n                  <div className={`h-32 bg-gradient-to-r ${\n                    event.category === 'cultural' ? 'from-blue-500 to-blue-600' :\n                    event.category === 'workshop' ? 'from-emerald-500 to-emerald-600' :\n                    event.category === 'seminar' ? 'from-purple-500 to-purple-600' :\n                    'from-amber-500 to-amber-600'\n                  } relative`}>\n                    <div className=\"absolute top-4 right-4\">\n                      <Badge className=\"bg-white dark:bg-card text-foreground capitalize\">\n                        {event.category}\n                      </Badge>\n                    </div>\n                  </div>\n                  <div className=\"p-6\">\n                    <h3 className=\"font-semibold text-xl mb-4\">{event.title}</h3>\n                    {event.description && (\n                      <p className=\"text-sm text-muted-foreground mb-4\">{event.description}</p>\n                    )}\n                    <div className=\"space-y-2 text-sm text-muted-foreground mb-6\">\n                      <div className=\"flex items-center gap-2\">\n                        <Calendar className=\"h-4 w-4\" />\n                        <span>{new Date(event.eventDate).toLocaleDateString()}</span>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Clock className=\"h-4 w-4\" />\n                        <span>{event.startTime} - {event.endTime}</span>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <MapPin className=\"h-4 w-4\" />\n                        <span>{event.location}</span>\n                      </div>\n                      {event.maxRegistrations && (\n                        <div className=\"flex items-center gap-2\">\n                          <Users className=\"h-4 w-4\" />\n                          <span>{event.currentRegistrations || 0} / {event.maxRegistrations} registered</span>\n                        </div>\n                      )}\n                    </div>\n                    <Button\n                      className=\"w-full\"\n                      onClick={() => registerMutation.mutate(event.id)}\n                      disabled={!isAuthenticated || registerMutation.isPending || \n                        (event.maxRegistrations && event.currentRegistrations >= event.maxRegistrations)}\n                      data-testid={`button-register-${event.id}`}\n                    >\n                      {!isAuthenticated ? \"Login to Register\" : \n                       registerMutation.isPending ? \"Registering...\" : \n                       (event.maxRegistrations && event.currentRegistrations >= event.maxRegistrations) ? \"Event Full\" :\n                       \"Register Now\"}\n                    </Button>\n                  </div>\n                </Card>\n              ))}\n            </div>\n\n            {filteredEvents.length === 0 && (\n              <div className=\"text-center py-12\">\n                <p className=\"text-muted-foreground\">No events found in this category</p>\n              </div>\n            )}\n          </div>\n        </div>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":6636},"client/src/pages/Results.tsx":{"content":"import { useState } from \"react\";\nimport { Header } from \"@/components/Header\";\nimport { Footer } from \"@/components/Footer\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Search, Download } from \"lucide-react\";\n\nexport default function Results() {\n  const [rollNumber, setRollNumber] = useState(\"\");\n  const [semester, setSemester] = useState(\"\");\n  const [results, setResults] = useState<any>(null);\n  const [isSearching, setIsSearching] = useState(false);\n\n  const handleSearch = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsSearching(true);\n    \n    // Mock search - In production, this would call the API\n    setTimeout(() => {\n      setResults({\n        student: {\n          name: \"Rajesh Kumar\",\n          rollNumber: rollNumber,\n          course: \"B.Tech Computer Science\",\n          semester: semester,\n        },\n        subjects: [\n          { name: \"Database Systems\", marks: 85, maxMarks: 100, grade: \"A\" },\n          { name: \"Operating Systems\", marks: 78, maxMarks: 100, grade: \"B+\" },\n          { name: \"Computer Networks\", marks: 92, maxMarks: 100, grade: \"A+\" },\n          { name: \"Software Engineering\", marks: 88, maxMarks: 100, grade: \"A\" },\n          { name: \"Web Technologies\", marks: 81, maxMarks: 100, grade: \"A-\" },\n        ],\n        sgpa: 8.6,\n        cgpa: 8.5,\n      });\n      setIsSearching(false);\n    }, 1000);\n  };\n\n  const handleDownload = () => {\n    console.log(\"Downloading results...\");\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header />\n      <main className=\"flex-1\">\n        <div className=\"bg-gradient-to-br from-primary/10 via-accent/5 to-background py-16 px-6\">\n          <div className=\"max-w-7xl mx-auto text-center\">\n            <h1 className=\"text-4xl md:text-5xl font-bold mb-4\">Exam Results</h1>\n            <p className=\"text-lg text-muted-foreground max-w-3xl mx-auto\">\n              Check your examination results by entering your roll number and semester\n            </p>\n          </div>\n        </div>\n\n        <div className=\"px-6 py-16\">\n          <div className=\"max-w-4xl mx-auto\">\n            <Card className=\"p-8 mb-8\">\n              <form onSubmit={handleSearch}>\n                <div className=\"grid md:grid-cols-2 gap-6 mb-6\">\n                  <div>\n                    <Label htmlFor=\"rollNumber\">Roll Number</Label>\n                    <Input\n                      id=\"rollNumber\"\n                      placeholder=\"Enter your roll number\"\n                      value={rollNumber}\n                      onChange={(e) => setRollNumber(e.target.value)}\n                      required\n                      data-testid=\"input-roll-number\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"semester\">Semester</Label>\n                    <Input\n                      id=\"semester\"\n                      placeholder=\"Enter semester (e.g., 6)\"\n                      value={semester}\n                      onChange={(e) => setSemester(e.target.value)}\n                      required\n                      data-testid=\"input-semester\"\n                    />\n                  </div>\n                </div>\n                <Button type=\"submit\" className=\"w-full\" disabled={isSearching} data-testid=\"button-search-results\">\n                  <Search className=\"h-4 w-4 mr-2\" />\n                  {isSearching ? \"Searching...\" : \"Search Results\"}\n                </Button>\n              </form>\n            </Card>\n\n            {results && (\n              <Card className=\"p-8\">\n                <div className=\"flex items-center justify-between mb-6\">\n                  <div>\n                    <h2 className=\"text-2xl font-bold mb-2\">{results.student.name}</h2>\n                    <p className=\"text-muted-foreground\">\n                      {results.student.rollNumber} • {results.student.course} • Semester {results.student.semester}\n                    </p>\n                  </div>\n                  <Button variant=\"outline\" onClick={handleDownload} data-testid=\"button-download-results\">\n                    <Download className=\"h-4 w-4 mr-2\" />\n                    Download\n                  </Button>\n                </div>\n\n                <div className=\"mb-6\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Subject</TableHead>\n                        <TableHead className=\"text-center\">Marks</TableHead>\n                        <TableHead className=\"text-center\">Max Marks</TableHead>\n                        <TableHead className=\"text-center\">Grade</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {results.subjects.map((subject: any, index: number) => (\n                        <TableRow key={index}>\n                          <TableCell className=\"font-medium\">{subject.name}</TableCell>\n                          <TableCell className=\"text-center\">{subject.marks}</TableCell>\n                          <TableCell className=\"text-center\">{subject.maxMarks}</TableCell>\n                          <TableCell className=\"text-center\">\n                            <span className=\"font-semibold\">{subject.grade}</span>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </div>\n\n                <div className=\"flex gap-6 pt-4 border-t\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">SGPA</p>\n                    <p className=\"text-2xl font-bold\">{results.sgpa}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">CGPA</p>\n                    <p className=\"text-2xl font-bold\">{results.cgpa}</p>\n                  </div>\n                </div>\n              </Card>\n            )}\n          </div>\n        </div>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":6301},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}\n","size_bytes":116},"client/src/pages/FacultyDashboard.tsx":{"content":"import { useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Header } from \"@/components/Header\";\nimport { Footer } from \"@/components/Footer\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { BookOpen, Users, FileText, Bell } from \"lucide-react\";\n\nexport default function FacultyDashboard() {\n  const { user, isLoading: authLoading, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    if (!authLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n    }\n  }, [isAuthenticated, authLoading, toast]);\n\n  const { data: dashboardData } = useQuery({\n    queryKey: [\"/api/faculty/dashboard\"],\n    enabled: isAuthenticated && user?.role === 'faculty',\n  });\n\n  if (authLoading || !isAuthenticated) {\n    return <div className=\"min-h-screen flex items-center justify-center\">Loading...</div>;\n  }\n\n  if (user?.role !== 'faculty') {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <p>Access Denied: Faculty access only</p>\n      </div>\n    );\n  }\n\n  const faculty = dashboardData?.faculty;\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header />\n      <main className=\"flex-1 px-6 py-8 bg-muted/30\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"mb-8\">\n            <h1 className=\"text-3xl font-bold mb-2\">Welcome back, {faculty?.name || user.firstName || 'Faculty'}!</h1>\n            <p className=\"text-muted-foreground\">{faculty?.employeeId} • {faculty?.department} • {faculty?.designation}</p>\n          </div>\n\n          <div className=\"grid lg:grid-cols-3 gap-6 mb-8\">\n            <Card className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h3 className=\"font-semibold\">Courses</h3>\n                <BookOpen className=\"h-5 w-5 text-muted-foreground\" />\n              </div>\n              <div className=\"text-3xl font-bold mb-2\">6</div>\n              <p className=\"text-sm text-muted-foreground\">Active courses this semester</p>\n            </Card>\n\n            <Card className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h3 className=\"font-semibold\">Students</h3>\n                <Users className=\"h-5 w-5 text-muted-foreground\" />\n              </div>\n              <div className=\"text-3xl font-bold mb-2\">180</div>\n              <p className=\"text-sm text-muted-foreground\">Enrolled students</p>\n            </Card>\n\n            <Card className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h3 className=\"font-semibold\">Assignments</h3>\n                <FileText className=\"h-5 w-5 text-muted-foreground\" />\n              </div>\n              <div className=\"text-3xl font-bold mb-2\">12</div>\n              <p className=\"text-sm text-muted-foreground\">Pending evaluations</p>\n            </Card>\n          </div>\n\n          <div className=\"grid lg:grid-cols-2 gap-6\">\n            <Card className=\"p-6\">\n              <h2 className=\"text-xl font-semibold mb-6\">Quick Actions</h2>\n              <div className=\"grid gap-3\">\n                <Button variant=\"outline\" className=\"justify-start\" data-testid=\"button-upload-grades\">\n                  <FileText className=\"h-4 w-4 mr-2\" />\n                  Upload Grades\n                </Button>\n                <Button variant=\"outline\" className=\"justify-start\" data-testid=\"button-create-assignment\">\n                  <BookOpen className=\"h-4 w-4 mr-2\" />\n                  Create Assignment\n                </Button>\n                <Button variant=\"outline\" className=\"justify-start\" data-testid=\"button-mark-attendance\">\n                  <Users className=\"h-4 w-4 mr-2\" />\n                  Mark Attendance\n                </Button>\n                <Button variant=\"outline\" className=\"justify-start\" data-testid=\"button-send-notice\">\n                  <Bell className=\"h-4 w-4 mr-2\" />\n                  Send Notice\n                </Button>\n              </div>\n            </Card>\n\n            <Card className=\"p-6\">\n              <h2 className=\"text-xl font-semibold mb-6\">Recent Activity</h2>\n              <div className=\"space-y-4\">\n                <div className=\"flex gap-3 pb-4 border-b\">\n                  <div className=\"h-2 w-2 rounded-full bg-primary mt-2 flex-shrink-0\" />\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm\">Assignment submitted by 45 students</p>\n                    <p className=\"text-xs text-muted-foreground mt-1\">2 hours ago</p>\n                  </div>\n                </div>\n                <div className=\"flex gap-3 pb-4 border-b\">\n                  <div className=\"h-2 w-2 rounded-full bg-primary mt-2 flex-shrink-0\" />\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm\">New query from student in Database Systems</p>\n                    <p className=\"text-xs text-muted-foreground mt-1\">5 hours ago</p>\n                  </div>\n                </div>\n                <div className=\"flex gap-3\">\n                  <div className=\"h-2 w-2 rounded-full bg-primary mt-2 flex-shrink-0\" />\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm\">Semester exam schedule published</p>\n                    <p className=\"text-xs text-muted-foreground mt-1\">1 day ago</p>\n                  </div>\n                </div>\n              </div>\n            </Card>\n          </div>\n        </div>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":5896},"replit.md":{"content":"# JITS College Website\n\n## Overview\n\nJITS (Jain Institute of Technology & Science) is a modern college website built as a full-stack application. The platform serves as a comprehensive digital presence for an educational institution, providing portals for students, faculty, and alumni, along with public-facing pages for admissions, departments, placements, and events.\n\nThe application features role-based authentication, interactive dashboards, event management, admission tracking, and contact forms. It follows a hybrid design approach combining Material Design principles with marketing-focused UI elements to balance institutional credibility with user engagement.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack Query (React Query) for server state and caching\n- **UI Components**: Shadcn/ui (Radix UI primitives) with Tailwind CSS for styling\n- **Design System**: \n  - Custom theme system with light/dark mode support\n  - Material Design-inspired component library\n  - Responsive layouts with mobile-first approach\n  - Custom color palette defined in CSS variables (professional blue primary, teal accents)\n  - Typography: Plus Jakarta Sans for headings, Inter for body text\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js\n- **Language**: TypeScript (ESM modules)\n- **Database ORM**: Drizzle ORM with PostgreSQL dialect\n- **Session Management**: Express-session with PostgreSQL session store (connect-pg-simple)\n- **API Pattern**: RESTful endpoints with role-based access control\n- **Development Setup**: \n  - Vite dev server in middleware mode for HMR\n  - Separate development and production build processes\n  - Custom logging middleware for API requests\n\n### Database Architecture\n- **ORM**: Drizzle ORM\n- **Database**: PostgreSQL (via Neon serverless driver with WebSocket support)\n- **Schema Design**:\n  - Role-based user system (students, faculty, alumni, admin)\n  - Separate tables for role-specific data (students, faculty, alumni)\n  - Core entities: departments, announcements, events, placements, admissions\n  - Supporting tables: event registrations, exam results, assignments, notifications, contact submissions\n  - Session storage table for authentication\n- **Data Validation**: Zod schemas generated from Drizzle schemas for runtime validation\n\n### Authentication & Authorization\n- **Method**: Replit Auth (OpenID Connect/OIDC)\n- **Implementation**: \n  - Passport.js with OpenID Connect strategy\n  - Session-based authentication with PostgreSQL storage\n  - Role-based access control (RBAC) with middleware guards\n  - User roles: student, faculty, alumni, admin\n  - Separate login flows and dashboards per role\n- **Session Configuration**:\n  - 7-day session TTL\n  - Secure, HTTP-only cookies\n  - Session data persisted in PostgreSQL\n\n### Route Structure\n- **Public Routes**: Home, departments, placements, admissions, contact, events, results\n- **Protected Routes**: \n  - Student dashboard (role: student)\n  - Faculty dashboard (role: faculty)\n  - Alumni dashboard (role: alumni)\n- **Auth Routes**: Role-specific login pages, Replit OAuth callback handlers\n- **API Routes**: RESTful endpoints under `/api` namespace with role-based access\n\n## External Dependencies\n\n### Third-Party Services\n- **Replit Auth**: OAuth/OIDC authentication provider\n  - Issuer URL: Configurable via environment variable (default: replit.com/oidc)\n  - Client credentials via REPL_ID environment variable\n  \n- **Neon Database**: Serverless PostgreSQL database\n  - Connection via DATABASE_URL environment variable\n  - WebSocket-based connection for serverless compatibility\n\n### Key Libraries & Frameworks\n- **UI/Design**: \n  - Radix UI primitives for accessible components\n  - Tailwind CSS for utility-first styling\n  - Lucide React for icons\n  - React Hook Form with Zod resolvers for form validation\n  \n- **Data & State**:\n  - TanStack Query for async state management\n  - Drizzle ORM for database operations\n  - Zod for schema validation\n\n- **Authentication**:\n  - Passport.js for auth strategy\n  - openid-client for OIDC integration\n  - express-session for session management\n  - connect-pg-simple for PostgreSQL session store\n\n- **Development Tools**:\n  - Vite for development server and builds\n  - esbuild for server bundling\n  - TypeScript for type safety\n  - Replit-specific plugins for dev environment integration\n\n### Environment Requirements\n- `DATABASE_URL`: PostgreSQL connection string (required)\n- `SESSION_SECRET`: Secret key for session signing (required)\n- `REPL_ID`: Replit application identifier for OAuth (required in Replit environment)\n- `ISSUER_URL`: OIDC issuer URL (optional, defaults to Replit OIDC)\n- `REPLIT_DOMAINS`: Allowed domains for Replit integration (required in Replit environment)\n- `NODE_ENV`: Environment mode (development/production)","size_bytes":5031},"client/src/pages/FacultyLogin.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { Header } from \"@/components/Header\";\nimport { Footer } from \"@/components/Footer\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { User } from \"lucide-react\";\n\nexport default function FacultyLogin() {\n  const [, setLocation] = useLocation();\n\n  const handleLogin = () => {\n    // Redirect to Replit Auth\n    window.location.href = \"/api/login\";\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header />\n      <main className=\"flex-1 flex items-center justify-center px-6 py-12 bg-muted/30\">\n        <Card className=\"w-full max-w-md p-8\">\n          <div className=\"flex justify-center mb-6\">\n            <div className=\"h-16 w-16 rounded-full bg-emerald-600 dark:bg-emerald-500 flex items-center justify-center\">\n              <User className=\"h-8 w-8 text-white\" />\n            </div>\n          </div>\n          <h1 className=\"text-2xl font-bold text-center mb-2\">Faculty Portal</h1>\n          <p className=\"text-center text-muted-foreground mb-8\">Sign in with your Replit account</p>\n          \n          <Button onClick={handleLogin} className=\"w-full\" data-testid=\"button-faculty-login-submit\">\n            Sign In with Replit\n          </Button>\n          \n          <div className=\"mt-6 text-center space-y-2\">\n            <div className=\"flex gap-4 justify-center text-sm\">\n              <button onClick={() => setLocation(\"/student/login\")} className=\"text-muted-foreground hover:text-foreground\" data-testid=\"link-student-login\">\n                Student Login\n              </button>\n              <button onClick={() => setLocation(\"/alumni/login\")} className=\"text-muted-foreground hover:text-foreground\" data-testid=\"link-alumni-login\">\n                Alumni Login\n              </button>\n            </div>\n          </div>\n        </Card>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":1929},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"client/src/pages/UndergraduatePrograms.tsx":{"content":"import { Header } from \"@/components/Header\";\nimport { Footer } from \"@/components/Footer\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { BookOpen, Clock, Users, Award, ChevronRight } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\nexport default function UndergraduatePrograms() {\n  const [, setLocation] = useLocation();\n\n  const programs = [\n    {\n      name: \"B.Tech in Computer Science & Engineering\",\n      duration: \"4 Years\",\n      seats: 120,\n      eligibility: \"10+2 with Physics, Chemistry, Mathematics (Min. 60%)\",\n      highlights: [\"AI & ML Specialization\", \"Industry Internships\", \"Research Projects\"],\n      accreditation: \"NBA Accredited\"\n    },\n    {\n      name: \"B.Tech in Electronics & Communication Engineering\",\n      duration: \"4 Years\",\n      seats: 60,\n      eligibility: \"10+2 with Physics, Chemistry, Mathematics (Min. 60%)\",\n      highlights: [\"VLSI Design\", \"Embedded Systems\", \"IoT Applications\"],\n      accreditation: \"NBA Accredited\"\n    },\n    {\n      name: \"B.Tech in Mechanical Engineering\",\n      duration: \"4 Years\",\n      seats: 60,\n      eligibility: \"10+2 with Physics, Chemistry, Mathematics (Min. 60%)\",\n      highlights: [\"CAD/CAM\", \"Robotics\", \"Thermal Systems\"],\n      accreditation: \"NBA Accredited\"\n    },\n    {\n      name: \"B.Tech in Civil Engineering\",\n      duration: \"4 Years\",\n      seats: 60,\n      eligibility: \"10+2 with Physics, Chemistry, Mathematics (Min. 60%)\",\n      highlights: [\"Smart Construction\", \"Sustainable Design\", \"Infrastructure Planning\"],\n      accreditation: \"NBA Accredited\"\n    },\n    {\n      name: \"Bachelor of Science (Computer Science)\",\n      duration: \"3 Years\",\n      seats: 40,\n      eligibility: \"10+2 with Mathematics/Computer Science (Min. 50%)\",\n      highlights: [\"Data Science\", \"Web Development\", \"Cloud Computing\"],\n      accreditation: \"NAAC A+ Grade\"\n    },\n    {\n      name: \"Bachelor of Business Administration\",\n      duration: \"3 Years\",\n      seats: 60,\n      eligibility: \"10+2 in any stream (Min. 50%)\",\n      highlights: [\"Entrepreneurship\", \"Digital Marketing\", \"Business Analytics\"],\n      accreditation: \"NAAC A+ Grade\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header />\n      <main className=\"flex-1\">\n        <div className=\"bg-primary text-primary-foreground py-20\">\n          <div className=\"max-w-7xl mx-auto px-6\">\n            <h1 className=\"text-4xl md:text-5xl font-bold mb-4\" data-testid=\"text-page-title\">Undergraduate Programs</h1>\n            <p className=\"text-xl opacity-90\" data-testid=\"text-page-subtitle\">Build your career foundation with our comprehensive UG programs</p>\n          </div>\n        </div>\n\n        <div className=\"max-w-7xl mx-auto px-6 py-16\">\n          <Card className=\"p-8 mb-12 bg-primary/5\">\n            <h2 className=\"text-2xl font-bold mb-4\" data-testid=\"text-about-title\">About Our UG Programs</h2>\n            <p className=\"text-muted-foreground leading-relaxed\" data-testid=\"text-about-content\">\n              Our undergraduate programs are designed to provide students with a strong foundation in their chosen field \n              while developing critical thinking, problem-solving, and leadership skills. With a perfect blend of theoretical \n              knowledge and practical experience, our programs prepare students for successful careers in industry, research, \n              and entrepreneurship.\n            </p>\n          </Card>\n\n          <div className=\"grid gap-6 mb-12\">\n            {programs.map((program, index) => (\n              <Card key={index} className=\"p-6\" data-testid={`card-program-${index}`}>\n                <div className=\"flex flex-col md:flex-row md:items-start md:justify-between gap-4 mb-4\">\n                  <div className=\"flex-1\">\n                    <h3 className=\"text-2xl font-bold mb-2\" data-testid={`text-program-name-${index}`}>{program.name}</h3>\n                    <Badge variant=\"default\" className=\"mb-4\" data-testid={`badge-program-accreditation-${index}`}>{program.accreditation}</Badge>\n                    \n                    <div className=\"grid md:grid-cols-3 gap-4 mb-4\">\n                      <div className=\"flex items-center gap-2\">\n                        <Clock className=\"h-5 w-5 text-primary\" />\n                        <div>\n                          <p className=\"text-sm text-muted-foreground\">Duration</p>\n                          <p className=\"font-semibold\" data-testid={`text-program-duration-${index}`}>{program.duration}</p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Users className=\"h-5 w-5 text-primary\" />\n                        <div>\n                          <p className=\"text-sm text-muted-foreground\">Total Seats</p>\n                          <p className=\"font-semibold\" data-testid={`text-program-seats-${index}`}>{program.seats}</p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Award className=\"h-5 w-5 text-primary\" />\n                        <div>\n                          <p className=\"text-sm text-muted-foreground\">Eligibility</p>\n                          <p className=\"font-semibold text-sm\" data-testid={`text-program-eligibility-${index}`}>\n                            {program.eligibility.split('(')[0]}\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div>\n                      <p className=\"text-sm font-semibold mb-2\">Program Highlights:</p>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {program.highlights.map((highlight, hIndex) => (\n                          <Badge key={hIndex} variant=\"outline\" data-testid={`badge-program-highlight-${index}-${hIndex}`}>\n                            {highlight}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <Button onClick={() => setLocation('/admissions/apply')} className=\"flex-shrink-0\" data-testid={`button-apply-${index}`}>\n                    Apply Now\n                    <ChevronRight className=\"h-4 w-4 ml-2\" />\n                  </Button>\n                </div>\n              </Card>\n            ))}\n          </div>\n\n          <div className=\"grid md:grid-cols-2 gap-6\">\n            <Card className=\"p-6\">\n              <div className=\"flex items-start gap-4\">\n                <div className=\"h-12 w-12 rounded-full bg-primary/10 flex items-center justify-center flex-shrink-0\">\n                  <BookOpen className=\"h-6 w-6 text-primary\" />\n                </div>\n                <div>\n                  <h3 className=\"text-xl font-bold mb-2\" data-testid=\"text-curriculum-title\">Modern Curriculum</h3>\n                  <p className=\"text-muted-foreground\" data-testid=\"text-curriculum-content\">\n                    Our curriculum is regularly updated to align with industry trends and includes hands-on projects, \n                    internships, and research opportunities.\n                  </p>\n                </div>\n              </div>\n            </Card>\n\n            <Card className=\"p-6\">\n              <div className=\"flex items-start gap-4\">\n                <div className=\"h-12 w-12 rounded-full bg-primary/10 flex items-center justify-center flex-shrink-0\">\n                  <Users className=\"h-6 w-6 text-primary\" />\n                </div>\n                <div>\n                  <h3 className=\"text-xl font-bold mb-2\" data-testid=\"text-faculty-title\">Expert Faculty</h3>\n                  <p className=\"text-muted-foreground\" data-testid=\"text-faculty-content\">\n                    Learn from experienced faculty members with strong academic backgrounds and industry experience, \n                    dedicated to your success.\n                  </p>\n                </div>\n              </div>\n            </Card>\n          </div>\n        </div>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":8246},"client/public/service-worker.js":{"content":"const CACHE_NAME = 'jits-v1';\nconst urlsToCache = [\n  '/',\n  '/index.html',\n  '/manifest.json',\n  '/icon-192.png',\n  '/icon-512.png'\n];\n\nself.addEventListener('install', (event) => {\n  event.waitUntil(\n    caches.open(CACHE_NAME)\n      .then((cache) => cache.addAll(urlsToCache))\n  );\n});\n\nself.addEventListener('fetch', (event) => {\n  event.respondWith(\n    caches.match(event.request)\n      .then((response) => {\n        if (response) {\n          return response;\n        }\n        return fetch(event.request).then(\n          (response) => {\n            if (!response || response.status !== 200 || response.type !== 'basic') {\n              return response;\n            }\n            const responseToCache = response.clone();\n            caches.open(CACHE_NAME)\n              .then((cache) => {\n                cache.put(event.request, responseToCache);\n              });\n            return response;\n          }\n        );\n      })\n  );\n});\n\nself.addEventListener('activate', (event) => {\n  const cacheWhitelist = [CACHE_NAME];\n  event.waitUntil(\n    caches.keys().then((cacheNames) => {\n      return Promise.all(\n        cacheNames.map((cacheName) => {\n          if (cacheWhitelist.indexOf(cacheName) === -1) {\n            return caches.delete(cacheName);\n          }\n        })\n      );\n    })\n  );\n});\n","size_bytes":1308},"client/src/pages/PostgraduatePrograms.tsx":{"content":"import { Header } from \"@/components/Header\";\nimport { Footer } from \"@/components/Footer\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { GraduationCap, Clock, Users, Award, ChevronRight, BookOpen } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\nexport default function PostgraduatePrograms() {\n  const [, setLocation] = useLocation();\n\n  const programs = [\n    {\n      name: \"M.Tech in Computer Science & Engineering\",\n      specializations: [\"Artificial Intelligence\", \"Data Science\", \"Cyber Security\", \"Cloud Computing\"],\n      duration: \"2 Years\",\n      seats: 30,\n      eligibility: \"B.Tech/B.E. in relevant field (Min. 60%)\",\n      accreditation: \"AICTE Approved\",\n      features: [\"Research Focus\", \"Industry Projects\", \"Thesis Work\"]\n    },\n    {\n      name: \"M.Tech in VLSI Design\",\n      specializations: [\"Digital VLSI\", \"Analog VLSI\", \"Mixed Signal Design\"],\n      duration: \"2 Years\",\n      seats: 18,\n      eligibility: \"B.Tech/B.E. in ECE/EEE (Min. 60%)\",\n      accreditation: \"AICTE Approved\",\n      features: [\"Advanced Labs\", \"Industry Tie-ups\", \"Research Publications\"]\n    },\n    {\n      name: \"M.Tech in Structural Engineering\",\n      specializations: [\"Earthquake Engineering\", \"Advanced Concrete\", \"Pre-stressed Concrete\"],\n      duration: \"2 Years\",\n      seats: 18,\n      eligibility: \"B.Tech/B.E. in Civil (Min. 60%)\",\n      accreditation: \"AICTE Approved\",\n      features: [\"Simulation Tools\", \"Field Projects\", \"Consultancy Work\"]\n    },\n    {\n      name: \"Master of Business Administration (MBA)\",\n      specializations: [\"Marketing\", \"Finance\", \"Human Resources\", \"Operations\", \"Digital Business\"],\n      duration: \"2 Years\",\n      seats: 120,\n      eligibility: \"Graduation in any discipline (Min. 50%)\",\n      accreditation: \"AICTE Approved\",\n      features: [\"Industry Internships\", \"Live Projects\", \"Global Exposure\"]\n    },\n    {\n      name: \"M.Sc. in Data Science\",\n      specializations: [\"Machine Learning\", \"Big Data Analytics\", \"Business Intelligence\"],\n      duration: \"2 Years\",\n      seats: 40,\n      eligibility: \"B.Sc./B.Tech in relevant field (Min. 55%)\",\n      accreditation: \"NAAC A+ Grade\",\n      features: [\"Practical Training\", \"Industry Certifications\", \"Capstone Projects\"]\n    },\n    {\n      name: \"M.Sc. in Applied Mathematics\",\n      specializations: [\"Computational Mathematics\", \"Operations Research\", \"Mathematical Modeling\"],\n      duration: \"2 Years\",\n      seats: 30,\n      eligibility: \"B.Sc. with Mathematics (Min. 55%)\",\n      accreditation: \"NAAC A+ Grade\",\n      features: [\"Research Oriented\", \"Seminar Series\", \"Publication Support\"]\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header />\n      <main className=\"flex-1\">\n        <div className=\"bg-primary text-primary-foreground py-20\">\n          <div className=\"max-w-7xl mx-auto px-6\">\n            <h1 className=\"text-4xl md:text-5xl font-bold mb-4\" data-testid=\"text-page-title\">Postgraduate Programs</h1>\n            <p className=\"text-xl opacity-90\" data-testid=\"text-page-subtitle\">Advance your expertise with specialized PG programs</p>\n          </div>\n        </div>\n\n        <div className=\"max-w-7xl mx-auto px-6 py-16\">\n          <Card className=\"p-8 mb-12 bg-primary/5\">\n            <div className=\"flex items-start gap-4\">\n              <GraduationCap className=\"h-8 w-8 text-primary flex-shrink-0 mt-1\" />\n              <div>\n                <h2 className=\"text-2xl font-bold mb-4\" data-testid=\"text-about-title\">About Our PG Programs</h2>\n                <p className=\"text-muted-foreground leading-relaxed\" data-testid=\"text-about-content\">\n                  Our postgraduate programs are designed for students seeking advanced knowledge and specialized skills in their \n                  chosen domain. With a strong emphasis on research, innovation, and industry collaboration, our PG programs \n                  prepare graduates for leadership roles in academia, industry, and entrepreneurial ventures. Students benefit \n                  from state-of-the-art facilities, expert faculty guidance, and opportunities for national and international \n                  collaborations.\n                </p>\n              </div>\n            </div>\n          </Card>\n\n          <div className=\"grid gap-6 mb-12\">\n            {programs.map((program, index) => (\n              <Card key={index} className=\"p-6\" data-testid={`card-program-${index}`}>\n                <div className=\"flex flex-col md:flex-row md:items-start md:justify-between gap-4 mb-4\">\n                  <div className=\"flex-1\">\n                    <h3 className=\"text-2xl font-bold mb-2\" data-testid={`text-program-name-${index}`}>{program.name}</h3>\n                    <Badge variant=\"default\" className=\"mb-4\" data-testid={`badge-program-accreditation-${index}`}>{program.accreditation}</Badge>\n                    \n                    <div className=\"grid md:grid-cols-3 gap-4 mb-4\">\n                      <div className=\"flex items-center gap-2\">\n                        <Clock className=\"h-5 w-5 text-primary\" />\n                        <div>\n                          <p className=\"text-sm text-muted-foreground\">Duration</p>\n                          <p className=\"font-semibold\" data-testid={`text-program-duration-${index}`}>{program.duration}</p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Users className=\"h-5 w-5 text-primary\" />\n                        <div>\n                          <p className=\"text-sm text-muted-foreground\">Total Seats</p>\n                          <p className=\"font-semibold\" data-testid={`text-program-seats-${index}`}>{program.seats}</p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Award className=\"h-5 w-5 text-primary\" />\n                        <div>\n                          <p className=\"text-sm text-muted-foreground\">Eligibility</p>\n                          <p className=\"font-semibold text-sm\" data-testid={`text-program-eligibility-${index}`}>\n                            {program.eligibility.split('(')[0]}\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"mb-4\">\n                      <p className=\"text-sm font-semibold mb-2\">Specializations:</p>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {program.specializations.map((spec, sIndex) => (\n                          <Badge key={sIndex} variant=\"outline\" data-testid={`badge-program-spec-${index}-${sIndex}`}>\n                            {spec}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n\n                    <div>\n                      <p className=\"text-sm font-semibold mb-2\">Program Features:</p>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {program.features.map((feature, fIndex) => (\n                          <Badge key={fIndex} variant=\"secondary\" data-testid={`badge-program-feature-${index}-${fIndex}`}>\n                            {feature}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <Button onClick={() => setLocation('/admissions/apply')} className=\"flex-shrink-0\" data-testid={`button-apply-${index}`}>\n                    Apply Now\n                    <ChevronRight className=\"h-4 w-4 ml-2\" />\n                  </Button>\n                </div>\n              </Card>\n            ))}\n          </div>\n\n          <div className=\"grid md:grid-cols-3 gap-6\">\n            <Card className=\"p-6\">\n              <div className=\"flex items-start gap-4\">\n                <div className=\"h-12 w-12 rounded-full bg-primary/10 flex items-center justify-center flex-shrink-0\">\n                  <BookOpen className=\"h-6 w-6 text-primary\" />\n                </div>\n                <div>\n                  <h3 className=\"text-xl font-bold mb-2\" data-testid=\"text-research-title\">Research Focus</h3>\n                  <p className=\"text-muted-foreground\" data-testid=\"text-research-content\">\n                    Engage in cutting-edge research with access to advanced labs and facilities.\n                  </p>\n                </div>\n              </div>\n            </Card>\n\n            <Card className=\"p-6\">\n              <div className=\"flex items-start gap-4\">\n                <div className=\"h-12 w-12 rounded-full bg-primary/10 flex items-center justify-center flex-shrink-0\">\n                  <Users className=\"h-6 w-6 text-primary\" />\n                </div>\n                <div>\n                  <h3 className=\"text-xl font-bold mb-2\" data-testid=\"text-industry-title\">Industry Connect</h3>\n                  <p className=\"text-muted-foreground\" data-testid=\"text-industry-content\">\n                    Collaborate with leading industries through projects and internships.\n                  </p>\n                </div>\n              </div>\n            </Card>\n\n            <Card className=\"p-6\">\n              <div className=\"flex items-start gap-4\">\n                <div className=\"h-12 w-12 rounded-full bg-primary/10 flex items-center justify-center flex-shrink-0\">\n                  <Award className=\"h-6 w-6 text-primary\" />\n                </div>\n                <div>\n                  <h3 className=\"text-xl font-bold mb-2\" data-testid=\"text-placement-title\">Career Growth</h3>\n                  <p className=\"text-muted-foreground\" data-testid=\"text-placement-content\">\n                    Excellent placement opportunities with top companies and research institutions.\n                  </p>\n                </div>\n              </div>\n            </Card>\n          </div>\n        </div>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":10128},"client/src/components/ReCaptcha.tsx":{"content":"import ReCAPTCHA from \"react-google-recaptcha\";\nimport { useRef } from \"react\";\n\ninterface ReCaptchaProps {\n  onChange: (token: string | null) => void;\n  onExpired?: () => void;\n  theme?: \"light\" | \"dark\";\n  size?: \"compact\" | \"normal\" | \"invisible\";\n}\n\nexport function ReCaptcha({ onChange, onExpired, theme = \"light\", size = \"normal\" }: ReCaptchaProps) {\n  const recaptchaRef = useRef<ReCAPTCHA>(null);\n  const siteKey = import.meta.env.VITE_RECAPTCHA_SITE_KEY;\n\n  if (!siteKey) {\n    console.warn(\"reCAPTCHA site key not found. Please add VITE_RECAPTCHA_SITE_KEY to your environment variables.\");\n    return (\n      <div className=\"p-4 bg-muted/30 rounded-md border border-dashed\">\n        <p className=\"text-sm text-muted-foreground\">\n          reCAPTCHA is not configured. Add VITE_RECAPTCHA_SITE_KEY to enable spam protection.\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <ReCAPTCHA\n      ref={recaptchaRef}\n      sitekey={siteKey}\n      onChange={onChange}\n      onExpired={onExpired}\n      theme={theme}\n      size={size}\n      data-testid=\"recaptcha\"\n    />\n  );\n}\n","size_bytes":1082},"client/src/pages/Accreditation.tsx":{"content":"import { Header } from \"@/components/Header\";\nimport { Footer } from \"@/components/Footer\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Award, CheckCircle, Calendar, Building } from \"lucide-react\";\n\nexport default function Accreditation() {\n  const accreditations = [\n    {\n      body: \"AICTE\",\n      fullName: \"All India Council for Technical Education\",\n      status: \"Approved\",\n      validUntil: \"2026\",\n      programs: [\"B.Tech\", \"M.Tech\", \"MBA\"],\n      icon: Award\n    },\n    {\n      body: \"NBA\",\n      fullName: \"National Board of Accreditation\",\n      status: \"Accredited\",\n      validUntil: \"2025\",\n      programs: [\"Computer Science\", \"Electronics\", \"Mechanical\"],\n      icon: Award\n    },\n    {\n      body: \"NAAC\",\n      fullName: \"National Assessment and Accreditation Council\",\n      status: \"A+ Grade\",\n      validUntil: \"2027\",\n      programs: [\"Institutional Accreditation\"],\n      icon: Award\n    },\n    {\n      body: \"UGC\",\n      fullName: \"University Grants Commission\",\n      status: \"Recognized\",\n      validUntil: \"Permanent\",\n      programs: [\"All Programs\"],\n      icon: Building\n    }\n  ];\n\n  const achievements = [\n    \"Ranked among top 100 engineering colleges in India\",\n    \"99% placement record for the past 5 years\",\n    \"Over 50 MoUs with leading industries\",\n    \"State-of-the-art research facilities\",\n    \"Highly qualified faculty with 80% Ph.D. holders\",\n    \"Active industry-academia collaborations\"\n  ];\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header />\n      <main className=\"flex-1\">\n        <div className=\"bg-primary text-primary-foreground py-20\">\n          <div className=\"max-w-7xl mx-auto px-6\">\n            <h1 className=\"text-4xl md:text-5xl font-bold mb-4\" data-testid=\"text-page-title\">Accreditation & Recognition</h1>\n            <p className=\"text-xl opacity-90\" data-testid=\"text-page-subtitle\">Certified excellence in technical education</p>\n          </div>\n        </div>\n\n        <div className=\"max-w-7xl mx-auto px-6 py-16\">\n          <div className=\"mb-12\">\n            <h2 className=\"text-3xl font-bold mb-2\" data-testid=\"text-accreditations-title\">Our Accreditations</h2>\n            <p className=\"text-muted-foreground mb-8\" data-testid=\"text-accreditations-desc\">\n              JITS is recognized and accredited by premier national bodies, ensuring quality education and global recognition.\n            </p>\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              {accreditations.map((acc, index) => (\n                <Card key={index} className=\"p-6\" data-testid={`card-accreditation-${index}`}>\n                  <div className=\"flex items-start gap-4\">\n                    <div className=\"h-16 w-16 rounded-full bg-primary/10 flex items-center justify-center flex-shrink-0\">\n                      <acc.icon className=\"h-8 w-8 text-primary\" />\n                    </div>\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-start justify-between mb-2\">\n                        <div>\n                          <h3 className=\"text-2xl font-bold\" data-testid={`text-acc-body-${index}`}>{acc.body}</h3>\n                          <p className=\"text-sm text-muted-foreground\" data-testid={`text-acc-fullname-${index}`}>{acc.fullName}</p>\n                        </div>\n                        <Badge variant=\"default\" data-testid={`badge-acc-status-${index}`}>{acc.status}</Badge>\n                      </div>\n                      <div className=\"flex items-center gap-2 text-sm text-muted-foreground mb-3\">\n                        <Calendar className=\"h-4 w-4\" />\n                        <span data-testid={`text-acc-validity-${index}`}>Valid until: {acc.validUntil}</span>\n                      </div>\n                      <div>\n                        <p className=\"text-sm font-semibold mb-2\">Accredited Programs:</p>\n                        <div className=\"flex flex-wrap gap-2\">\n                          {acc.programs.map((program, pIndex) => (\n                            <Badge key={pIndex} variant=\"outline\" data-testid={`badge-acc-program-${index}-${pIndex}`}>\n                              {program}\n                            </Badge>\n                          ))}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </Card>\n              ))}\n            </div>\n          </div>\n\n          <Card className=\"p-8 bg-primary/5\">\n            <h2 className=\"text-3xl font-bold mb-6\" data-testid=\"text-achievements-title\">Key Achievements</h2>\n            <div className=\"grid md:grid-cols-2 gap-4\">\n              {achievements.map((achievement, index) => (\n                <div key={index} className=\"flex items-start gap-3\" data-testid={`text-achievement-${index}`}>\n                  <CheckCircle className=\"h-5 w-5 text-primary flex-shrink-0 mt-0.5\" />\n                  <p>{achievement}</p>\n                </div>\n              ))}\n            </div>\n          </Card>\n\n          <Card className=\"p-8 mt-8\">\n            <h2 className=\"text-2xl font-bold mb-4\" data-testid=\"text-quality-title\">Quality Assurance</h2>\n            <p className=\"text-muted-foreground leading-relaxed mb-4\" data-testid=\"text-quality-content\">\n              JITS is committed to maintaining the highest standards of quality in all aspects of education, research, \n              and administration. Our quality assurance mechanisms include:\n            </p>\n            <ul className=\"space-y-2 ml-6\">\n              <li className=\"list-disc\" data-testid=\"text-qa-item-0\">Regular curriculum updates based on industry requirements and global trends</li>\n              <li className=\"list-disc\" data-testid=\"text-qa-item-1\">Continuous faculty development programs and training</li>\n              <li className=\"list-disc\" data-testid=\"text-qa-item-2\">Student feedback and grievance redressal mechanisms</li>\n              <li className=\"list-disc\" data-testid=\"text-qa-item-3\">Internal quality audits and assessment systems</li>\n              <li className=\"list-disc\" data-testid=\"text-qa-item-4\">Industry advisory board for program enhancement</li>\n              <li className=\"list-disc\" data-testid=\"text-qa-item-5\">Regular infrastructure and facility upgrades</li>\n            </ul>\n          </Card>\n        </div>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":6435},"client/src/pages/GoverningBody.tsx":{"content":"import { Header } from \"@/components/Header\";\nimport { Footer } from \"@/components/Footer\";\nimport { Card } from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Building2, Mail, Phone } from \"lucide-react\";\n\nexport default function GoverningBody() {\n  const members = [\n    {\n      name: \"Dr. Rajesh Kumar\",\n      position: \"Chairman\",\n      qualification: \"Ph.D. (IIT Delhi)\",\n      image: \"\",\n      email: \"chairman@jits.edu.in\",\n      phone: \"+91 98765 43210\"\n    },\n    {\n      name: \"Prof. Sunita Sharma\",\n      position: \"Vice Chairman\",\n      qualification: \"Ph.D. (MIT, USA)\",\n      image: \"\",\n      email: \"vicechairman@jits.edu.in\",\n      phone: \"+91 98765 43211\"\n    },\n    {\n      name: \"Dr. Amit Patel\",\n      position: \"Director\",\n      qualification: \"Ph.D. (Stanford University)\",\n      image: \"\",\n      email: \"director@jits.edu.in\",\n      phone: \"+91 98765 43212\"\n    },\n    {\n      name: \"Shri Ravi Verma\",\n      position: \"Secretary\",\n      qualification: \"MBA, LLB\",\n      image: \"\",\n      email: \"secretary@jits.edu.in\",\n      phone: \"+91 98765 43213\"\n    },\n    {\n      name: \"Dr. Priya Singh\",\n      position: \"Member - Academic Council\",\n      qualification: \"Ph.D. (Cambridge)\",\n      image: \"\",\n      email: \"priya.singh@jits.edu.in\",\n      phone: \"+91 98765 43214\"\n    },\n    {\n      name: \"Mr. Vikram Malhotra\",\n      position: \"Member - Industry Representative\",\n      qualification: \"B.Tech, MBA\",\n      image: \"\",\n      email: \"vikram.malhotra@jits.edu.in\",\n      phone: \"+91 98765 43215\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header />\n      <main className=\"flex-1\">\n        <div className=\"bg-primary text-primary-foreground py-20\">\n          <div className=\"max-w-7xl mx-auto px-6\">\n            <h1 className=\"text-4xl md:text-5xl font-bold mb-4\" data-testid=\"text-page-title\">Governing Body</h1>\n            <p className=\"text-xl opacity-90\" data-testid=\"text-page-subtitle\">Leadership guiding our institution to excellence</p>\n          </div>\n        </div>\n\n        <div className=\"max-w-7xl mx-auto px-6 py-16\">\n          <Card className=\"p-8 mb-12 bg-primary/5\">\n            <div className=\"flex items-start gap-4\">\n              <Building2 className=\"h-8 w-8 text-primary flex-shrink-0 mt-1\" />\n              <div>\n                <h2 className=\"text-2xl font-bold mb-4\" data-testid=\"text-about-title\">About the Governing Body</h2>\n                <p className=\"text-muted-foreground leading-relaxed\" data-testid=\"text-about-content\">\n                  The Governing Body of JITS consists of eminent academicians, industry experts, and administrators \n                  who provide strategic direction and oversight to ensure the institution maintains the highest \n                  standards of education and research. The body meets regularly to review policies, approve major \n                  decisions, and guide the institution towards achieving its vision and mission.\n                </p>\n              </div>\n            </div>\n          </Card>\n\n          <h2 className=\"text-3xl font-bold mb-8\" data-testid=\"text-members-title\">Members</h2>\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {members.map((member, index) => (\n              <Card key={index} className=\"p-6\" data-testid={`card-member-${index}`}>\n                <div className=\"flex flex-col items-center text-center mb-4\">\n                  <Avatar className=\"h-24 w-24 mb-4\">\n                    <AvatarImage src={member.image} alt={member.name} />\n                    <AvatarFallback className=\"text-xl bg-primary text-primary-foreground\">\n                      {member.name.split(' ').map(n => n[0]).join('')}\n                    </AvatarFallback>\n                  </Avatar>\n                  <h3 className=\"text-xl font-bold mb-1\" data-testid={`text-member-name-${index}`}>{member.name}</h3>\n                  <p className=\"text-primary font-semibold mb-2\" data-testid={`text-member-position-${index}`}>{member.position}</p>\n                  <p className=\"text-sm text-muted-foreground\" data-testid={`text-member-qualification-${index}`}>{member.qualification}</p>\n                </div>\n                <div className=\"space-y-2 border-t pt-4\">\n                  <div className=\"flex items-center gap-2 text-sm\">\n                    <Mail className=\"h-4 w-4 text-muted-foreground\" />\n                    <a href={`mailto:${member.email}`} className=\"text-muted-foreground hover:text-foreground\" data-testid={`link-member-email-${index}`}>\n                      {member.email}\n                    </a>\n                  </div>\n                  <div className=\"flex items-center gap-2 text-sm\">\n                    <Phone className=\"h-4 w-4 text-muted-foreground\" />\n                    <a href={`tel:${member.phone}`} className=\"text-muted-foreground hover:text-foreground\" data-testid={`link-member-phone-${index}`}>\n                      {member.phone}\n                    </a>\n                  </div>\n                </div>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":5210},"client/src/pages/AboutVision.tsx":{"content":"import { Header } from \"@/components/Header\";\nimport { Footer } from \"@/components/Footer\";\nimport { Card } from \"@/components/ui/card\";\nimport { Eye, Target, Heart, Users } from \"lucide-react\";\n\nexport default function AboutVision() {\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header />\n      <main className=\"flex-1\">\n        <div className=\"bg-primary text-primary-foreground py-20\">\n          <div className=\"max-w-7xl mx-auto px-6\">\n            <h1 className=\"text-4xl md:text-5xl font-bold mb-4\" data-testid=\"text-page-title\">Vision & Mission</h1>\n            <p className=\"text-xl opacity-90\" data-testid=\"text-page-subtitle\">Shaping the future of education and innovation</p>\n          </div>\n        </div>\n\n        <div className=\"max-w-7xl mx-auto px-6 py-16\">\n          <div className=\"grid md:grid-cols-2 gap-8 mb-16\">\n            <Card className=\"p-8\">\n              <div className=\"flex items-center gap-4 mb-6\">\n                <div className=\"h-16 w-16 rounded-full bg-primary/10 flex items-center justify-center\">\n                  <Eye className=\"h-8 w-8 text-primary\" />\n                </div>\n                <h2 className=\"text-3xl font-bold\" data-testid=\"text-vision-title\">Our Vision</h2>\n              </div>\n              <p className=\"text-lg text-muted-foreground leading-relaxed\" data-testid=\"text-vision-content\">\n                To be a globally recognized institution of excellence in technical education, research, and innovation, \n                producing world-class professionals who contribute significantly to society and drive technological advancement.\n              </p>\n            </Card>\n\n            <Card className=\"p-8\">\n              <div className=\"flex items-center gap-4 mb-6\">\n                <div className=\"h-16 w-16 rounded-full bg-primary/10 flex items-center justify-center\">\n                  <Target className=\"h-8 w-8 text-primary\" />\n                </div>\n                <h2 className=\"text-3xl font-bold\" data-testid=\"text-mission-title\">Our Mission</h2>\n              </div>\n              <p className=\"text-lg text-muted-foreground leading-relaxed\" data-testid=\"text-mission-content\">\n                To provide quality technical education through innovative teaching methodologies, foster research and \n                development, promote industry-academia collaboration, and nurture ethical values among students to \n                create responsible global citizens.\n              </p>\n            </Card>\n          </div>\n\n          <div className=\"mb-16\">\n            <h2 className=\"text-3xl font-bold mb-8 text-center\" data-testid=\"text-core-values-title\">Core Values</h2>\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              {[\n                {\n                  icon: Heart,\n                  title: \"Excellence\",\n                  description: \"Striving for the highest standards in education, research, and service\"\n                },\n                {\n                  icon: Users,\n                  title: \"Integrity\",\n                  description: \"Upholding honesty, transparency, and ethical conduct in all endeavors\"\n                },\n                {\n                  icon: Target,\n                  title: \"Innovation\",\n                  description: \"Encouraging creativity and pioneering solutions to complex challenges\"\n                },\n                {\n                  icon: Heart,\n                  title: \"Inclusivity\",\n                  description: \"Fostering a diverse and welcoming environment for all stakeholders\"\n                }\n              ].map((value, index) => (\n                <Card key={index} className=\"p-6 text-center\" data-testid={`card-value-${index}`}>\n                  <div className=\"flex justify-center mb-4\">\n                    <div className=\"h-12 w-12 rounded-full bg-primary/10 flex items-center justify-center\">\n                      <value.icon className=\"h-6 w-6 text-primary\" />\n                    </div>\n                  </div>\n                  <h3 className=\"text-xl font-bold mb-2\" data-testid={`text-value-title-${index}`}>{value.title}</h3>\n                  <p className=\"text-sm text-muted-foreground\" data-testid={`text-value-desc-${index}`}>{value.description}</p>\n                </Card>\n              ))}\n            </div>\n          </div>\n\n          <Card className=\"p-8 bg-primary/5\">\n            <h2 className=\"text-3xl font-bold mb-6\" data-testid=\"text-objectives-title\">Strategic Objectives</h2>\n            <ul className=\"space-y-4\">\n              {[\n                \"Enhance academic programs with industry-relevant curriculum and cutting-edge technologies\",\n                \"Strengthen research capabilities through state-of-the-art infrastructure and collaborations\",\n                \"Foster entrepreneurship and innovation among students and faculty\",\n                \"Expand international partnerships and student exchange programs\",\n                \"Promote sustainable development and social responsibility initiatives\",\n                \"Continuously upgrade facilities and adopt best practices in teaching and administration\"\n              ].map((objective, index) => (\n                <li key={index} className=\"flex items-start gap-3\" data-testid={`text-objective-${index}`}>\n                  <div className=\"h-6 w-6 rounded-full bg-primary flex items-center justify-center flex-shrink-0 mt-0.5\">\n                    <span className=\"text-primary-foreground text-sm\">{index + 1}</span>\n                  </div>\n                  <p className=\"text-lg\">{objective}</p>\n                </li>\n              ))}\n            </ul>\n          </Card>\n        </div>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":5738}},"version":2}